[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Research in Computational Ecology",
    "section": "",
    "text": "Welcome\nThe objective of this five-day training course, co-organized by the FRB-CESAB and the GdR EcoStat, is to train young researchers in reproducibility, software development and version management tools (e.g. Git, GitHub, R Markdown, Quarto, renv, Docker), applied to biodiversity research."
  },
  {
    "objectID": "index.html#program",
    "href": "index.html#program",
    "title": "Reproducible Research in Computational Ecology",
    "section": "Program",
    "text": "Program\n\n\n\n\n\n\n\nMonday\n\nOpen science & Reproducible research\nResearch compendium & Good practices\nVersion control with Git & GitHub\n\n\n\nTuesday\n\nLiterate programming: R Markdown & Quarto\nPipeline toolkit with targets\n\n\n\nWednesday\n\nDealing with R package versions with renv\nContainerization with Docker\nBuilding an R package\n\n\n\nThursday\n\nSubgroups projects\n\n\n\nFriday\n\nSubgroups projects"
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Reproducible Research in Computational Ecology",
    "section": "Prerequisites",
    "text": "Prerequisites\n  Please follow this tutorial to install your working environment before attending the training course.\n  You also need to create an account on GitHub."
  },
  {
    "objectID": "index.html#material",
    "href": "index.html#material",
    "title": "Reproducible Research in Computational Ecology",
    "section": "Material",
    "text": "Material\nAll the material used in this training course (slides, data, exercises) is available at: https://github.com/rdatatoolbox/"
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "Reproducible Research in Computational Ecology",
    "section": "Citation",
    "text": "Citation\n\nCasajus N, Bonnici I, Dray S, Gimenez O, Guéry L, Guilhaumon F, Schiettekatte NMD & Siberchicot A (2023) FRB-CESAB & GdR EcoStat training course: Reproducible Research in Computational Ecology. Zenodo. URL: http://doi.org/10.5281/zenodo.4262978"
  },
  {
    "objectID": "index.html#contributions",
    "href": "index.html#contributions",
    "title": "Reproducible Research in Computational Ecology",
    "section": "Contributions",
    "text": "Contributions\nIf you see mistakes or want to suggest changes, please create an issue on the source repository."
  },
  {
    "objectID": "index.html#reuse",
    "href": "index.html#reuse",
    "title": "Reproducible Research in Computational Ecology",
    "section": "Reuse",
    "text": "Reuse\nText and figures are licensed under Creative Commons Attribution CC By 4.0, unless otherwise noted."
  },
  {
    "objectID": "index.html#see-also",
    "href": "index.html#see-also",
    "title": "Reproducible Research in Computational Ecology",
    "section": "See also",
    "text": "See also\nDiscover the other training courses provided by the FRB-CESAB and its partners: https://frbcesab.github.io/training-courses/"
  },
  {
    "objectID": "chapters/setting-up-r.html",
    "href": "chapters/setting-up-r.html",
    "title": "Setting up R",
    "section": "",
    "text": "The guide to correctly install and configure a working environment for data science with , , and  is available at: https://frbcesab.github.io/rsetup/"
  },
  {
    "objectID": "chapters/course-opensci.html",
    "href": "chapters/course-opensci.html",
    "title": "Reproducible research",
    "section": "",
    "text": "An introduction to open science and reproducible research\n\n\n\n   Author: François Guillaumon   Source: https://github.com/rdatatoolbox/course-opensci/   Slides: https://rdatatoolbox.github.io/course-opensci/"
  },
  {
    "objectID": "chapters/course-compendium.html",
    "href": "chapters/course-compendium.html",
    "title": "Research compendium",
    "section": "",
    "text": "An introduction to research compendium\n\n\n\n   Author: François Guillaumon   Source: https://github.com/rdatatoolbox/course-compendium/   Slides: https://rdatatoolbox.github.io/course-compendium/"
  },
  {
    "objectID": "chapters/course-git.html",
    "href": "chapters/course-git.html",
    "title": "Version control w/ git",
    "section": "",
    "text": "An introduction to version control w/ git\n\n\n\n   Author: Iago Bonnici   Source: https://github.com/rdatatoolbox/course-git-iago/   Slides: https://rdatatoolbox.github.io/chapters/course-git.pdf"
  },
  {
    "objectID": "chapters/course-github.html",
    "href": "chapters/course-github.html",
    "title": "Introduction to GitHub",
    "section": "",
    "text": "An introduction to code hosting platform w/ GitHub\n\n\n\n   Author: Aurélie Siberchicot   Source: https://github.com/rdatatoolbox/course-github/   Slides: https://rdatatoolbox.github.io/course-github/"
  },
  {
    "objectID": "chapters/course-quarto.html",
    "href": "chapters/course-quarto.html",
    "title": "Literate programming w/ Quarto",
    "section": "",
    "text": "An introduction to literate programming w/ R Markdown & Quarto\n\n\n\n   Authors: François Guillaumon & Nicolas Casajus   Source: https://github.com/rdatatoolbox/course-rmarkdown/   Slides: https://rdatatoolbox.github.io/course-rmarkdown/"
  },
  {
    "objectID": "chapters/course-targets.html",
    "href": "chapters/course-targets.html",
    "title": "Pipeline toolkits w/ targets",
    "section": "",
    "text": "An introduction to pipeline toolkits w/ targets\n\n\n\n   Authors: François Guillaumon & Nina Schiettekatte   Source: https://github.com/rdatatoolbox/course-targets/   Slides: https://rdatatoolbox.github.io/course-targets/"
  },
  {
    "objectID": "chapters/course-renv.html",
    "href": "chapters/course-renv.html",
    "title": "Virtual environments w/ renv",
    "section": "",
    "text": "An introduction to renv: dealing with R package versions\n\n\n\n   Author: Nicolas Casajus   Source: https://github.com/rdatatoolbox/course-renv/   Slides: https://rdatatoolbox.github.io/course-renv/"
  },
  {
    "objectID": "chapters/course-docker.html",
    "href": "chapters/course-docker.html",
    "title": "Containerization w/ Docker",
    "section": "",
    "text": "An introduction to containerization w/ Docker\n\n\n\n   Author: Nicolas Casajus   Source: https://github.com/rdatatoolbox/course-docker/   Slides: https://rdatatoolbox.github.io/course-docker/"
  },
  {
    "objectID": "chapters/course-package.html",
    "href": "chapters/course-package.html",
    "title": "Building an R package",
    "section": "",
    "text": "An introduction how on to create an R package\n\n\n\n   Authors: Aurélie Siberchicot & Nicolas Casajus   Source: https://github.com/rdatatoolbox/course-rpackage/   Slides: https://rdatatoolbox.github.io/course-rpackage/"
  },
  {
    "objectID": "chapters/ex-compendium.html",
    "href": "chapters/ex-compendium.html",
    "title": "Research compendium",
    "section": "",
    "text": "Objectif\n\n\n\nL’objectif de cet exercice est de créer un research compendium, c.-à-d. un dossier de travail dont la structure est dérivée de celle d’un package . Vous allez découvrir les fichiers importants que nous vous recommandons d’ajouter à un projet de recherche. Vous allez aussi apprendre à écrire et documenter des fonctions .\nCe research compendium servira de base de travail tout au long de la formation.\n\n\nNB. Cet exercice s’inspire du workshop proposé par Anna Krystalli.\nAfin de nous assister dans la création de la structure de notre dossier de travail, nous allons utiliser le package  rcompendium, développé dans le cadre de cette formation. Il permet d’automatiser la création des fichiers/répertoires spécifiques à un compendium/package .\n\nPréambule\nInstallez le package  rcompendium depuis le CRAN :\n\n## Installation de 'rcompendium' ----\ninstall.packages(\"rcompendium\")\n\n## Chargement du package -----\nlibrary(\"rcompendium\")\n\n  Si vous rencontrez des difficultés à installer le package, lisez attentivement le README.\nUne fois le package installé, vous devez exécuter la fonction set_credentials() afin de stocker localement vos informations personnelles (prénom, nom, email, ORCID, protocole de communication avec GitHub). Ces informations permettront de remplir automatiquement certains fichiers.\n  Cette fonction n’est à utiliser qu’une seule fois.\n\n## Stockage de vos informations ----\nset_credentials(given    = \"Jane\",\n                family   = \"Doe\", \n                email    = \"jane.doe@mail.me\", \n                orcid    = \"0000-0000-0000-0000\", \n                protocol = \"ssh\")\n\nCes informations ont été copiées dans le presse-papier. Collez son contenu dans le fichier ~/.Renviron (ouvert dans RStudio par cette fonction). Ce fichier est lu à chaque ouverture de  et son contenu sera accessible aux fonctions du package rcompendium.\nRedémarrez la session  et vérifiez que vos informations personnelles sont bien accessibles.\n\n## Vérification (après redémarrage de R) ----\noptions()$\"email\"\n# [1] \"jane.doe@mail.me\"\n\nFinalement, vérifiez que vous avez bien suivi les instructions pour configurer git en exécutant la commande gh::gh_whoami(). Vous devriez voir s’afficher :\n{\n  \"name\": \"Jane Doe\",\n  \"login\": \"jdoe\",\n  \"html_url\": \"https://github.com/jdoe\",\n  \"scopes\": \"repo, workflow\",\n  \"token\": \"ghp_...ZZ9z\"\n} \n\n\nProjet RStudio\nCréez un nouveau projet RStudio : File &gt; New Project &gt; New Directory &gt; New Project\n\nChoisissez un nom pour votre projet (sans signe de ponctuation)\nSélectionnez l’emplacement où le nouveau projet sera créé\nDécochez toutes les autres cases et validez\n\n\n\n\n\n\n\nBonne pratique #1\n\n\n\nToujours travailler dans un Projet RStudio. Cela présente l’avantage de simplifier les chemins d’accès aux fichiers, notamment avec le package  here et sa fonction here(). Les chemins d’accès seront toujours construits par rapport au dossier contenant le fichier .Rproj (racine du projet). On parle de chemin relatif. N’utilisez plus jamais la fonction setwd().\n\n\n\n\nFichier DESCRIPTION\nLe fichier DESCRIPTION décrit les métadonnées du projet (titre, auteur, description, dépendances requises, etc.). C’est un des éléments essentiels d’un package . Ici, nous allons le détourner pour l’utiliser dans le cadre d’un compendium afin de bénéficier des outils de développement de packages . Ajoutons ce fichier avec la fonction add_description() de rcompendium.\n\n## Ajout d'un fichier DESCRIPTION ----\nadd_description()\n\nComme vous le voyez, le fichier DESCRIPTION a été pré-rempli avec vos informations personnelles. Vous éditerez les champs Title et Description plus loin.\n\n\n\n\n\n\nBonne pratique #2\n\n\n\nToujours ajouter un fichier DESCRIPTION à la racine du projet. En plus de la description du projet, il permet de lister les packages dont le projet dépend (tags Imports, Depends et Remotes). Avec ce fichier, plus besoin d’utiliser les fonctions install.packages() et library(). Elles seront remplacées respectivement par remotes::install_deps() et devtools::load_all().\n\n\n\n\nChoix d’une Licence\nTout matériel partagé en ligne doit disposé d’une licence qui décrit ce qu’il est possible de faire avec. Ainsi, nous vous recommandons d’ajouter dès le début du projet une licence. Pour savoir quelle licence est la plus appropriée à votre projet, rendez-vous sur cette page : https://choosealicense.com.\nAjoutons la licence GPL-2 à notre projet avec la fonction add_license() de rcompendium.\n\n## Ajout d'une licence ----\nadd_license(license = \"GPL-2\")\n\nNotez qu’un nouveau fichier a été créé : LICENSE.md. Celui-ci détaille le contenu de la license choisie et sera lu par GitHub. Regardez aussi le contenu du fichier DESCRIPTION : la section License a été mise à jour.\n\n\n\n\n\n\nBonne pratique #3\n\n\n\nToujours ajouter une LICENSE à un projet qui sera rendu public. Visitez le site Choose a License pour choisir la plus appropriée à votre projet.\n  Si aucune licence n’est renseignée, votre projet est soumis aux règles de la No License : aucune permission n’est accordée. En d’autres termes, personne ne peut rien faire avec votre projet (pas d’utilisation, pas de modification, pas de partage, etc.).\n\n\n\n\nAjout des répertoires\nLa prochaine étape consiste en la création de sous-répertoires, chacun ayant un rôle précis. Pour cela, utilisez la fonction add_compendium() de rcompendium.\n\n## Ajout de sous-répertoires ----\nadd_compendium(compendium = c(\"data\", \"analyses\", \"R\", \"figures\", \"outputs\"))\n\n\n\n\n\n\n\nBonne pratique #4\n\n\n\nUn bon Research compendium sera composé de différents sous-répertoires, chacun destiné à accueillir un certain type de fichiers. Par ex., le dossier data/ contiendra toutes les données brutes nécessaires au projet. Le dossier outputs/ contiendra tous les résultats générés (hors figures). Le dossier figures/ contiendra toutes les figures produites par les analyses. Le dossier R/ ne contiendra que des fonctions  (et leurs documentations). Le dossier analyses/ contiendra des scripts  (ou des fichiers .Rmd et/ou .qmd) qui appeleront les fonctions . Cette structure peut bien sûr être adaptée selon les besoins et la complexité du projet.\n\n\n\n\nImplémentation des fonctions\nNous voilà fin prêt à coder !\nLe dépôt GitHub https://github.com/rdatatoolbox/datarepo contient les données que nous utiliserons tout au long de la formation. Celles-ci proviennent de deux bases de données : PanTHERIA et WWF WildFinder. Lisez attentivement le README pour plus de détails.\nObjectif : écrire 1, 2 ou 4 fonctions , qui vont permettre de télécharger les quatre fichiers de données hébergées sur le dépôt GitHub mentionné ci-dessus. Les fichiers seront enregistrés dans le dossier data/ et le sous-dossier spécifique à leurs bases de données (pantheria/ ou wildfinder/).\nUtilisez la fonction usethis::use_r() pour créer le/les fichiers .R dans le dossier R/.\n Utilisez les fonctions dir.create(), here::here() et utils::download.file().\nProposition de fonction (essayer de ne pas regarder)\n\n\nCode\ndl_pantheria_data &lt;- function(overwrite = FALSE) {\n  \n  ## Destination ---- \n  path &lt;- here::here(\"data\", \"pantheria\")\n  \n  ## File name ----\n  filename &lt;- \"PanTHERIA_1-0_WR05_Aug2008.txt\"\n  \n  ## GitHub URL ----\n  url &lt;- paste0(\"https://raw.githubusercontent.com/rdatatoolbox/datarepo/main/\",\n                \"data/pantheria/\")\n  \n  if (file.exists(file.path(path, filename)) && !overwrite) {\n    \n    ## Check if exists locally ----\n    message(\"The filename already exists. Use 'overwrite = TRUE' to replace it\")\n    \n  } else {\n    \n    ## Create destination folder ----\n    dir.create(path, showWarnings = FALSE, recursive = TRUE)\n    \n    ## Download file ----\n    utils::download.file(url      = paste0(url, filename),\n                         destfile = file.path(path, filename),\n                         mode     = \"wb\")\n  }\n\n  invisible(NULL) \n}\n\n\n\n\n\n\n\n\nBonne pratique #5\n\n\n\nEcrivez des fonctions : on parle de Factorisation de code. Cela rendra votre code plus clair et plus facilement réutilisable. Placez toujours vos fonctions  dans le dossier R/. Si vous utilisez des fonctions de dépendances externes, priviligiez cette écriture : package::fonction().\n\n\n\n\nDocumentation\nMaintenant, documentez votre/vos fonctions. C’est essentiel ! Pour cela, ajoutez un entête roxygen2 à vos fonctions. Cette syntaxe permet de documenter efficacement toute fonction .\nCette entête devra contenir (a minima) un titre, une description de chaque argument et le retour de la fonction.\nProposition de documentation (essayer de ne pas regarder)\n\n\nCode\n#' Download PanTHERIA dataset\n#'\n#' @description \n#' This function downloads the PanTHERIA dataset (text file) hosted on the \n#' GitHub repository &lt;https://github.com/rdatatoolbox/datarepo/&gt;. The file\n#' won't be downloaded if already exists locally (except if `overwrite = TRUE`).\n#' The file `PanTHERIA_1-0_WR05_Aug2008.txt` will be stored in \n#' `data/pantheria/`. This folder will be created if required.\n#' \n#' @param overwrite a `logical`. If `TRUE`, the file will be downloaded again \n#'   and the previous version will be replaced.\n#'\n#' @return No return value.\n#' \n#' @export\n\ndl_pantheria_data &lt;- function(overwrite = FALSE) { ... }\n\n\nOptionnel : transpilez vos entêtes roxygen2 en fichiers .Rd, seuls fichiers acceptés par  pour documenter des fonctions. Ces fichiers .Rd seront stockés dans le dossier man/.\n\n## Génération de la doc ----\ndevtools::document()\n\nL’aide de votre fonction est maintenant accessible via ?nom_fonction.\n\n\n\n\n\n\nBonne pratique #6\n\n\n\nPensez aux autres (et au vous du futur) : documentez toujours votre code. Un code sans documentation est inutile. Utilisez les entêtes roxygen2 pour documenter vos fonctions , de simples commentaires pour documenter du code et des README pour tout le reste.\n\n\n\n\nAjout des dépendances\nNos fonctions contiennent des dépendances à deux packages externes : utils et here. Nous devons ajouter ces dépendances au fichier DESCRIPTION. Pour cela, nous allons utiliser la fonction add_dependencies() de rcompendium.\n\n## Ajout de dépendances ----\nadd_dependencies(compendium = \".\")\n\nRegardez le contenu du fichier DESCRIPTION. Par défaut, les packages requis sont listés sous le tag Imports. Ainsi, pour utiliser une fonction externe, il faudra l’appeler par package::fonction(). Si vous remplacer le tag Imports par Depends, l’utilisation de la fonction devtools::load_all() (voir plus bas) aura le même effet qu’un library() et vous pourrez utiliser une fonction externe par fonction().\nLa fonction add_dependencies() va scanner chaque fichier .R, .Rmd et .qmd du projet et détecter les packages externes utilisés pour les ajouter automatiquement au fichier DESCRIPTION.\n\n\n\n\n\n\nBonne pratique #7\n\n\n\nListez toujours les packages requis dans le fichier DESCRIPTION. Ainsi, vous centralisez la liste des packages requis en un seul endroit et vous pourrez utiliser les fonctions remotes::install_deps() et devtools::load_all().\n\n\n\n\nChargement du projet\nMaintenant que notre compendium contient les éléments clés d’un package , c.-à-d. un fichier DESCRIPTION et un répertoire R/, nous pouvons utiliser les outils de développement des packages  pour réaliser deux tâches.\n\nLes packages requis peuvent être installés (ou mis à jour) à l’aide de la fonction remotes::install_deps(). Pour être plus reproductible, vous pouvez désactiver les mises à jour en ajoutant l’argument upgrade = \"never\". Cette fonction vient remplacer la fonction install.packages(). Elle va lire le fichier DESCRIPTION pour récupérer la liste des packages requis. Il est donc important d’utiliser régulièrement la fonction add_dependencies() pour tenir ce fichier à jour.\nLes fonctions  stockées dans le dossier R/ peuvent être chargées avec la fonction devtools::load_all(). Cette fonction vient remplacer la fonction source() (et library() si les packages requis sont listés sous le tag Depends dans le fichier DESCRIPTION). Ce qui est pratique dans le cas où on doit charger de nombreux fonctions . Après chaque modification d’une fonction , n’oubliez pas d’exécuter la fonction devtools::load_all().\n\nEssayez ces deux fonctions.\n\n## Installation des packages manquants ----\nremotes::install_deps(upgrade = \"never\")\n\n## Chargement des packages et fonctions R ----\ndevtools::load_all()\n\n\n\n\n\n\n\nBonne pratique #8\n\n\n\nAvec un fichier DESCRIPTION (listant les dépendances requises) et un dossier R/, vous pouvez utiliser les fonctions remotes::install_deps() (installation/mise à jour des packages) et devtools::load_all() (chargement du projet) au lieu de install.packages(), library() et source().\n\n\n\n\nAjout d’un make.R\nAfin d’automatiser notre projet, nous allons créer un script  à la racine du projet. Nous l’appelerons, par convention, make.R. Celui-ci aura deux objectifs : 1) mettre en place le projet et 2) exécuter le projet. L’idée est de n’exécuter que ce script. Utilisez la fonction add_makefile() de rcompendium et lisez le contenu du nouveau fichier créé.\n\n## Ajout d'un makefile ----\nadd_makefile()\n\n\n\n\n\n\n\nBonne pratique #9\n\n\n\nBien que non essentiel, un fichier make.R placé à la racine du projet permet de facilement mettre en place le projet (installation et chargement des packages requis et des fonctions ) et d’exécuter les différentes analyses de manière séquentielle (en sourçant les scripts  qui appellent eux-même les fonctions ). C’est la porte d’entrée des analyses.\n\n\n\n\nAppel aux fonctions\nJusqu’à présent, nous n’avons fait que définir des fonctions , mais nous ne les avons pas exécutées. Nous allons créer notre premier script  dans le dossier analyses/. Celui-ci aura pour objectif d’appeler les fonctions  définies précédemment pour télécharger les données.\nCréez un nouveau script  comme suit et éditez-le:\n\n## Ajout d'un script R ----\nutils::file.edit(here::here(\"analyses\", \"download-data.R\"))\n\nProposition de contenu (essayer de ne pas regarder)\n\n\nCode\n# Download project raw data\n#\n# This script will download the PanTHERIA and WWF WildFinder datasets. The\n# four files will be stored in `data/`.\n# \n# All functions used in the script have been developed for this project\n# and can be found in the folder R/.\n#\n# Jane Doe &lt;jane.doe@mail.me&gt;\n# 2023/11/09\n\n## Download PanTHERIA database ----\n\ndl_pantheria_data(overwrite = FALSE)\n\n\n## Download WWF WildFinder database ----\n\n# ...\n\n\nN.B. Nous verrons plus tard comment transformer ce script  en un fichier Quarto (.qmd).\nFinalement, ajoutez une ligne dans le fichier make.R qui permettra d’exécuter ce script . Utilisez les fonctions source() et here::here() pour cela.\nPour charger le projet et lancer les analyses, il suffit d’exécuter ce fichier make.R.\n\n\n\n\n\n\nBonne pratique #10\n\n\n\nLe dossier analyses/ contient les scripts  qui appellent les fonctions  stockées dans le dossier R/. Il peut être ignoré dans le cas de simples analyses. Le code de l’analyse devra alors se trouver dans le make.R. A contrario, dans le cas d’analyses complexes, n’hésitez pas à multiplier les scripts  (plutôt que d’avoir un seul gros script).\n\n\n\n\nAjout d’un README\nPlus tard, vous verrez comment envoyer ce projet sur GitHub. Pour l’instant, nous allons légèrement anticiper les cours suivants, et ajouter un README à notre compendium. Ce sera la vitrine du projet. Les rôles d’un README sont : 1) de présenter le projet, 2) d’expliquer son contenu, et 3) d’expliquer comment l’installer et l’utiliser.\nPour cela, vous allez ajouter un README.Rmd (fichier R Markdown) à la racine de votre projet avec la fonction add_readme_rmd() de rcompendium.\n\n## Ajout d'un README ----\nadd_readme_rmd(type = \"compendium\")\n\nAdaptez son contenu et n’oubliez pas de transpiler ce fichier .Rmd en un fichier .md (fichier Markdown lu par GitHub). Utilisez le bouton Knit de RStudio ou :\n\n## Conversion du README.Rmd en README.md ----\nrmarkdown::render(\"README.Rmd\")\n\n  N’oubliez pas aussi d’éditer les sections Title et Description du fichier DESCRIPTION.\n\n\n\n\n\n\nBonne pratique #11\n\n\n\nAjoutez un README à votre projet afin d’aider l’utilisateur à comprendre votre projet.\n\n\n\nFélicitation ! Votre research compendium est maintenant fonctionnel.\n\n\n\nBonus\nEcrivez une fonction  qui va télécharger le fichier README.md du dépôt https://github.com/rdatatoolbox/datarepo/ et enregistrez-le dans le dossier data/. Vous ajouterez ainsi la description des données à votre projet.\nProposition de fonction (essayer de ne pas regarder)\n\n\nCode\n#' Download data description (README)\n#'\n#' @description \n#' This function downloads the `README.md` of the GitHub repository\n#' &lt;https://github.com/rdatatoolbox/datarepo/&gt; providing data description.\n#' The file won't be downloaded if already exists locally (except if \n#' `overwrite = TRUE`).\n#' The `README.md` will be stored in `data/`.\n#' \n#' @param overwrite a logical. If `TRUE`, the file will be downloaded again and\n#'   the previous version will be erased.\n#'\n#' @return No return value.\n#' \n#' @export\n\ndl_data_descr &lt;- function(overwrite = FALSE) {\n  \n  ## Destination location ---- \n  path &lt;- here::here(\"data\")\n  \n  ## File name ----\n  filename &lt;- \"README.md\"\n  \n  ## GitHub URL ----\n  url &lt;- \"https://raw.githubusercontent.com/rdatatoolbox/datarepo/main/\"\n  \n  if (file.exists(file.path(path, filename)) && !overwrite) {\n    \n    ## Check if exists locally ----\n    message(\"The filename already exists. Use 'overwrite = TRUE' to replace it\")\n    \n  } else {\n    \n    ## Create destination folder ----\n    dir.create(path, showWarnings = FALSE, recursive = TRUE)\n    \n    ## Download file ----\n    utils::download.file(url      = paste0(url, filename),\n                         destfile = file.path(path, filename),\n                         mode     = \"wb\")\n  }\n\n  invisible(NULL) \n}\n\n\n\n\n\n\n\n\nLa fonction new_compendium()\n\n\n\nL’ensemble de ces étapes peut être réalisé avec une seule fonction : new_compendium() de rcompendium. N’oubliez pas de créer un nouveau projet RStudio avant si vous voulez l’utiliser."
  },
  {
    "objectID": "chapters/ex-github.html",
    "href": "chapters/ex-github.html",
    "title": "Git & GitHub",
    "section": "",
    "text": "Objectif\n\n\n\nL’objectif de cet exercice est de vous familiariser avec l’utilisation de  et .\n\n\n\nTravailler seul\n  Vous allez envoyer le research compendium créé à l’Exercice 1 sur votre compte GitHub.\n\n\n\n\n\n\nGitHub First vs. GitHub Last\n\n\n\nCette approche est appelée GitHub Last : on crée d’abord le projet en local, puis on crée le dépôt distant. Pour plus d’information : GitHub First et GitHub Last.\n\n\n\nInitialiser git\nDans un premier temps, vous devez initialiser git dans votre projet. Entrez la ligne de commande suivante dans le terminal de RStudio :\n## Initialisation de git -----\ngit init\nVérifiez l’état de votre projet :\n## Statut des fichiers vu par git -----\ngit status\n\n\nAjout d’un .gitignore\nCertains fichiers sont inutiles à versionner et peuvent même parfois créer des conflits. C’est le cas notamment du fichier .Rproj. Nous allons les ajouter au .gitignore en utilisant la fonction  add_to_gitignore() de rcompendium\n\n## Ajout d'un .gitignore pour les projets R -----\nrcompendium::add_to_gitignore()\n\n\n\nPremière version\nIl est temps de créer une première version. Cela se fera en deux temps : 1) sélection des fichiers (git add) et 2) enregistrement de la version (git commit).\n## Sélection de tous les fichiers ----\ngit add .\n\n## Création d'une nouvelle version ----\ngit commit -m \"init repo\"\nVérifiez le status des fichiers :\n## Statut des fichiers vu par git -----\ngit status\nAffichez l’historique :\n## Historique des versions -----\ngit log\n\n\nCréation du dépôt GitHub\nMaintenant, nous souhaitons envoyer notre projet sur GitHub. Rendez-vous sur GitHub et créez un nouveau dépôt VIDE : donnez juste un nom de dépôt et n’ajoutez aucun fichier supplémentaire (pas de licence, .gitignore, README). La page du dépôt créé contient une série d’instructions correspondant à trois cas de figure. Nous allons suivre la section Push an existing repository from the command line.\nDans le terminal de RStudio :\n## Ajout du chemin vers le dépôt distant ----\ngit remote add origin git@github.com:your_account/your_repo.git\n\n## Envoi du dépôt local vers le dépôt distant ----\ngit push -u origin main\n\nFélicitation ! Votre research compendium est maintenant sur GitHub.\n\n\n\n\n\n\n\nGitHub API\n\n\n\nUne alternative est d’utiliser l’API GitHub via la fonction  use_github() du package usethis. Cette fonction va créer le dépôt distant sur GitHub et envoyer votre dépôt local sur GitHub (git push).\n\n## Création du dépôt public GitHub ----\nusethis::use_github()\n\n  Pour utiliser l’API GitHub, vous devez avoir sauvegardé localement votre GitHub Personal Access Token (PAT) tel quel indiqué ici.\n\n\nContinuez à modifier vos fichiers, créez de nouvelles versions (git add et git commit) et envoyez-les sur GitHub (git push).\n\n\n\nCollaborer\n  Mettez-vous par groupe de 2-3 personnes et déterminez un leader parmis vous : vous allez collaborer sur son projet.\nSur GitHub, le leader va allez dans les Settings et ajoutez une personne de votre groupe comme collaborateur de votre projet.\n  Mettez en oeuvre 3 solutions pour collaborer sur le même projet. En fonction de votre statut dans le projet et de votre objectif :\n\nUtilisez les Issues pour suggérer au leader des améliorations\nSi vous êtes collaborateur, Clonez le dépôt, faites les modifications et envoyez-les\nSi vous ne l’êtes pas, Forkez, Clonez, et essayez la Pull Request"
  },
  {
    "objectID": "chapters/ex-quarto.html#bonus",
    "href": "chapters/ex-quarto.html#bonus",
    "title": "Quarto",
    "section": "Bonus",
    "text": "Bonus\nSi votre code est bien écrit, vous pouvez rapidement l’exécuter avec une autre famille de Mammifères !"
  },
  {
    "objectID": "chapters/ex-targets.html",
    "href": "chapters/ex-targets.html",
    "title": "Targets",
    "section": "",
    "text": "Objectif\n\n\n\nL’objectif de cet exercice est de vous familiariser avec l’utilisation de targets, package  permettant d’optimiser le flux de travail.\n\n\n\nConsignes\nNous allons intégrer targets au research compendium créé lors de l’exercice 3.\nAvant toute chose, supprimez la ligne devtools::load_all() du fichier make.R : cette fonction n’est pas prise en compte par targets pour charger les fonctions.\nPuis, procédez comme suit :\n\nEcrivez votre plan d’analyses dans un fichier _targets.R placé à la racine du projet. N’oubliez pas d’attacher les packages targets et tarchetypes avec la fonction library() et de sourcer les différentes fonctions avec source().\nLe dernier élément du pipeline sera le rapport index.qmd vu à l’exercice précédent. Cependant, celui-ci n’exécutera aucune fonction créée (celles-ci seront gérées par targets). Le fichier .qmd se contentera d’importer les outputs : vous devrez exporter la figure (avec une nouvelle fonction) dans le dossier figures/. L’affichage du tableau résultat pourra se faire avec les fonctions targets::tar_read() et/ou targets::tar_load().\nFinalement, dans le fichier make.R remplacez la ligne quarto::quarto_render() par tar::tar_make()\n\n  Pensez aux commits ! Pensez aussi à mettre à jour la liste des dépendances dans le fichiers DESCRIPTION avec la fonction add_dependencies() de rcompendium."
  },
  {
    "objectID": "chapters/ex-renv.html",
    "href": "chapters/ex-renv.html",
    "title": "Renv",
    "section": "",
    "text": "Objectif\n\n\n\nL’objectif de cet exercice est de vous familiariser avec l’utilisation de renv, package  permettant de gérer les versions de packages requis par le projet.\n\n\n\nConsignes\nNous allons intégrer renv au research compendium créé lors de l’exercice 4.\n\nUtilisez la fonction renv::init()\nAjoutez le dossier renv/ et le ficher .Rprofile au .gitignore (afin de ne pas envoyer sur GitHub les packages - seul le renv.lock suffit)\nJouez avec les fonctions renv::status(), renv::install() et renv::snapshot() (n’oubliez pas de mettre à jour la liste des dépendances dans le fichier DESCRIPTION avec la fonction add_dependencies() de rcompendium)\nModifiez le make.R de manière à installer les packages via renv plutôt qu’avec la fonction remotes::install_deps()\nVérifiez si votre projet est encore fonctionnel en exécutant le make.R\n\n  Pensez aux commits !"
  },
  {
    "objectID": "chapters/ex-docker.html",
    "href": "chapters/ex-docker.html",
    "title": "Docker",
    "section": "",
    "text": "Objectif\n\n\n\nL’objectif de cet exercice est de vous familiariser avec l’utilisation de Docker, et plus particulièrement avec la création d’un Dockerfile.\n\n\n\nConsignes\nNous allons ajouter un Dockerfile au research compendium créé lors de l’exercice 5.\n\nUtilisez la fonction rcompendium::add_dockerfile() (désactivez temporairement renv avec renv::deactivate() le temps d’utiliser cette fonction, puis réactivez-le avec renv::activate())\nRéfléchissez si la version de l’image de base rocker/rstudio:4.3.2 est la plus appropriée à votre projet\nRegardez le contenu du README.Rmd : doit-il être transpilé ?\nUtilisez Docker : suivez les instructions du README.md pour construire votre image, démarrer un conteneur et exécuter les analyses dans votre environnement Docker.\n\n  Pensez aux commits !\n\nFélicitation ! Votre project est 99,99% reproductible."
  },
  {
    "objectID": "chapters/ex-package.html",
    "href": "chapters/ex-package.html",
    "title": "Package",
    "section": "",
    "text": "Objectif\n\n\n\nDans cet exercice, vous allez créer un package .\n\n\n\nConsignes\nCréez un nouveau projet RStudio.\n\nUtilisez la fonction rcompendium::add_description() pour ajouter un fichier DESCRIPTION\nUtilisez la fonction rcompendium::add_to_gitignore() pour ajouter un .gitignore spécifique à \nImplémentez des fonctions  dans le dossier R/ et documentez-les avec la syntaxe roxygen2. Vous pouvez réutiliser certaines fonctions développées lors des exercices précédents.\nMettez à jour la documentation des fonctions avec devtools::document()\nMettez à jour les dépendances dans le fichier DESCRIPTION avec rcompendium::add_dependencies()\nVérifiez que votre package ne comporte pas d’erreur avec devtools::check()\nAjoutez un README.Rmd avec rcompendium::add_readme_rmd() et éditez-le. N’oubliez pas de le transpiler en README.md avec rmarkdown::render()\nUtilisez la fonction usethis::use_github() pour envoyer votre projet sur GitHub.\n\n  Pensez aux commits !\n\n\nBonus\n  Mettez en place des GitHub Actions pour :\n\nVérifiez votre package sur les serveurs GitHub après chaque push avec rcompendium::add_github_actions_check()\nDéployez le site Web du package avec rcompendium::add_github_actions_pkgdown()\n\nAjoutez au README.Rmd les badges correspondants avec rcompendium::add_github_actions_check_badge() et rcompendium::add_github_actions_pkgdown_badge().\n\n\n\n\n\n\nLa fonction new_package()\n\n\n\nL’ensemble de ces étapes peut être réalisé avec une seule fonction : new_package() de rcompendium. N’oubliez pas de créer un nouveau projet RStudio avant si vous voulez l’utiliser."
  },
  {
    "objectID": "chapters/degrees-repro.html",
    "href": "chapters/degrees-repro.html",
    "title": "The degrees of reproducibility",
    "section": "",
    "text": "Download the full size image"
  },
  {
    "objectID": "chapters/course-api.html",
    "href": "chapters/course-api.html",
    "title": "API & web scraping",
    "section": "",
    "text": "An introduction to data acquisition w/ API & Web scraping\n\n\n\n   Author: Nicolas Casajus   Source: https://github.com/rdatatoolbox/course-api/   Slides: https://rdatatoolbox.github.io/course-api/"
  },
  {
    "objectID": "chapters/course-rspatial.html",
    "href": "chapters/course-rspatial.html",
    "title": "Spatial analyses w/ sf",
    "section": "",
    "text": "An introduction to spatial analyses w/ sf\n\n\n\n   Author: Nicolas Casajus   Source: https://github.com/rdatatoolbox/course-rspatial/   Slides: https://rdatatoolbox.github.io/course-rspatial/"
  },
  {
    "objectID": "chapters/course-tidyverse.html",
    "href": "chapters/course-tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "An introduction to the tidyverse\n\n\n\n   Author: Olivier Gimenez   Source: https://github.com/rdatatoolbox/course-tidyverse/   Slides: https://rdatatoolbox.github.io/course-tidyverse/"
  }
]