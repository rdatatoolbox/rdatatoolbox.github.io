{
  "articles": [
    {
      "path": "ex-compendium.html",
      "title": "Research compendium",
      "author": [],
      "contents": "\r\n\r\nContents\r\nPréambule\r\nProjet RStudio\r\nFichier DESCRIPTION\r\nChoix d’une Licence\r\nAjout du Compendium\r\nAjout de code \r\nFonctions \r\nDocumentation\r\nAjout des dépendances\r\n\r\nChargement du projet\r\nAjout d’un make.R\r\nAnalyses\r\nAjout d’un README\r\nBonus\r\n\r\n\r\n\r\nL’objectif de cet exercice est de créer un research compendium, c.-à-d. un\r\ndossier de travail dont la structure est dérivée de celle d’un package .\r\nCe research compendium servira de base de travail tout au long de la formation.\r\n\r\n Cet exercice s’inspire du\r\nworkshop proposé par Anna Krystalli.\r\n\r\nAfin de nous assister dans la création de la structure de notre dossier de travail,\r\nnous allons utiliser le package \r\nrcompendium, développé dans le cadre\r\nde cette formation. Il permet d’automatiser la création des fichiers/répertoires\r\nspécifiques à un compendium/package .\r\nLe package  rcompendium s’inspire en grande partie du package  rrtools\r\net repose sur le package  usethis. Merci aux développeurs de ces packages.\r\n\r\nPréambule\r\nInstallez le package  rcompendium depuis le CRAN :\r\n\r\n\r\n## Installation de 'rcompendium' ----\r\ninstall.packages(\"rcompendium\")\r\n\r\n\r\nUne fois le package installé, vous devez exécuter la fonction set_credentials() afin de stocker localement vos informations\r\npersonnelles (prénom, nom, email, ORCID, protocole de communication avec GitHub).\r\nCes informations permettront de remplir automatiquement certains fichiers.\r\nCette fonction n’est à utiliser qu’une seule fois.\r\n\r\n\r\n## Stockage de vos informations ----\r\nrcompendium::set_credentials(given    = \"Jane\",\r\n                             family   = \"Doe\", \r\n                             email    = \"jane.doe@mail.me\", \r\n                             orcid    = \"0000-0000-0000-0000\", \r\n                             protocol = \"ssh\")\r\n\r\n\r\nCes informations ont été copiées dans le presse-papier. Collez son contenu dans\r\nle fichier ~/.Renviron (ouvert dans RStudio par cette fonction). Ce fichier est lu\r\nà chaque ouverture de  et son contenu sera\r\naccessible aux fonctions du package rcompendium.\r\nRedémarrez la session  et vérifiez que vos\r\ninformations personnelles sont bien accessibles.\r\n\r\n\r\n## Vérification (après redémarrage de R) ----\r\noptions()$\"email\"\r\n# [1] \"jane.doe@mail.me\"\r\n\r\n\r\nFinalement, vérifiez que vous avez bien suivi les\r\ninstructions\r\npour configurer git en exécutant la commande gh::gh_whoami(). Vous devriez voir s’afficher :\r\n{\r\n  \"name\": \"Jane Doe\",\r\n  \"login\": \"jdoe\",\r\n  \"html_url\": \"https://github.com/jdoe\",\r\n  \"scopes\": \"admin:repo_hook, repo, workflow\",\r\n  \"token\": \"ghp_...ZZ9z\"\r\n} \r\n\r\nProjet RStudio\r\nCréez un nouveau projet RStudio : File > New Project > New Directory > New Project\r\nChoisissez un nom pour votre projet : par ex., demo.compendium\r\nSélectionnez l’emplacement où le nouveau projet sera créé\r\nDécochez toutes les autres cases et validez\r\n\r\n Bonne pratique #1\r\n\r\nToujours travailler dans un Projet RStudio. Cela présente l’avantage de simplifier les chemins d’accès aux fichiers, notamment avec le package  here et sa fonction here(). Les chemins d’accès seront toujours construits par rapport au dossier contenant le fichier .Rproj (racine du projet). On parle de chemin relatif. N’utilisez plus jamais la fonction setwd().\r\n\r\n\r\nFichier DESCRIPTION\r\nLe fichier DESCRIPTION décrit les métadonnées du projet (titre, auteur, description, dépendances requises, etc.). C’est un des éléments essentiels d’un package . Ici, nous allons le détourner pour l’utiliser dans le cadre d’un compendium afin de bénéficier des outils de développement de packages .\r\n\r\n\r\n## Ajout d'un fichier DESCRIPTION ----\r\nrcompendium::add_description()\r\n\r\n\r\nComme vous le voyez, ce fichier a été pré-rempli avec vos informations personnelles.\r\nVous éditerez les champs Title et Description plus loin.\r\n\r\n Bonne pratique #2\r\n\r\nToujours ajouter un fichier DESCRIPTION à la racine du projet. En plus de la description du projet, il permet de lister les packages dont le projet dépend (tags Imports, Depends et Remotes). Avec ce fichier, plus besoin d’utiliser les fonctions install.packages() et library(). Elles seront remplacées respectivement par remotes::install_deps() et devtools::load_all().\r\n\r\n\r\nChoix d’une Licence\r\nTout matériel partagé en ligne doit disposé d’une licence qui décrit ce qu’il est\r\npossible de faire avec. Ainsi, nous vous recommandons d’ajouter dès le début du projet une licence. Pour savoir quelle licence est la plus appropriée à votre projet, rendez-vous sur cette page : https://choosealicense.com/.\r\nAjoutez la licence GPL-2 à votre projet :\r\n\r\n\r\n## Ajout d'une licence ----\r\nrcompendium::add_license(license = \"GPL-2\")\r\n\r\n\r\nNotez qu’un nouveau fichier a été créé : LICENSE.md. Celui-ci détaille le contenu de la license choisie. Regardez aussi le contenu du fichier DESCRIPTION : la section License a été mise à jour.\r\n\r\n Bonne pratique #3\r\n\r\nToujours ajouter une LICENSE à un projet qui sera rendu public. Visitez le site Choose a License pour choisir la plus appropriée à votre projet.\r\n\r\n\r\nAjout du Compendium\r\nLa prochaine étape consiste en la création de sous-répertoires, chacun ayant un rôle précis. Pour cela, utilisez la fonction rcompendium::add_compendium().\r\n\r\n\r\n## Ajout de sous-répertoires ----\r\nrcompendium::add_compendium()\r\n\r\n\r\nNaviguez à l’intérieur de chaque sous-répertoire et lisez les README associés pour comprendre leur rôle.\r\nN.B. Pour ce compendium, nous n’avons pas besoin des sous-répertoires data/raw-data et data/derived-data. Supprimez-les :\r\n\r\n\r\nunlink(here::here(\"data\", \"raw-data\"), recursive = TRUE)\r\nunlink(here::here(\"data\", \"derived-data\"), recursive = TRUE)\r\n\r\n\r\n\r\n Bonne pratique #4\r\n\r\nUn bon Research compendium sera composé de différents sous-répertoires, chacun destiné à accueillir un certain type de fichier. Le dossier data/ contiendra toutes les données brutes nécessaires au projet. Le dossier outputs/ contiendra tous les résultats générés (hors figures). Le dossier figures/ contiendra toutes les figures produites par les analyses. Le dossier R/ ne contiendra que des fonctions  (et leurs documentations). Le dossier analyses/ contiendra des scripts  (ou des fichiers .Rmd) qui appeleront les fonctions . Cette structure peut bien sûr être adaptée selon les besoins.\r\n\r\n\r\nAjout de code \r\nNous voilà fin prêt à coder !\r\nLe dépôt GitHub https://github.com/rdatatoolbox/datarepo contient les données que nous utiliserons tout au long de la formation. Celles-ci proviennent de deux bases de données : PanTHERIA et WWF WildFinder. Lisez attentivement le README pour plus de détails.\r\n\r\nFonctions \r\nObjectif :  écrire 1, 2 ou 4 fonctions , qui vont permettre de télécharger les quatre fichiers de données hébergées sur le dépôt GitHub ci-dessus. Les fichiers seront enregistrés dans le dossier data/ et le sous-dossier spécifique à leurs bases de données (pantheria/ ou wildfinder/).\r\nUtilisez la fonction usethis::use_r() pour créer le/les fichiers .R dans le dossier R/.\r\n Utilisez les fonctions :\r\ndir.create(), here::here() et utils::download.file()\r\nProposition de fonction (essayer de ne pas regarder)\r\n\r\n\r\nShow code\r\n\r\ndl_pantheria_data <- function(overwrite = FALSE) {\r\n  \r\n  ## Destination ---- \r\n  path <- here::here(\"data\", \"pantheria\")\r\n  \r\n  ## File name ----\r\n  filename <- \"PanTHERIA_1-0_WR05_Aug2008.txt\"\r\n  \r\n  ## GitHub URL ----\r\n  url <- paste0(\"https://raw.githubusercontent.com/rdatatoolbox/datarepo/main/\",\r\n                \"data/pantheria/\")\r\n  \r\n  if (file.exists(file.path(path, filename)) && !overwrite) {\r\n    \r\n    ## Check if exists locally ----\r\n    message(\"The filename already exists. Use 'overwrite = TRUE' to replace it\")\r\n    \r\n  } else {\r\n    \r\n    ## Create destination folder ----\r\n    dir.create(path, showWarnings = FALSE, recursive = TRUE)\r\n    \r\n    ## Download file ----\r\n    utils::download.file(url = paste0(url, filename),\r\n                         destfile = file.path(path, filename))\r\n  }\r\n\r\n  invisible(NULL) \r\n}\r\n\r\n\r\n\r\n Bonne pratique #5\r\nEcrivez des fonctions : on parle de Factorisation de code. Cela rendra votre code plus clair et plus facilement réutilisable. Placez toujours vos fonctions  dans le dossier R/. Si vous utilisez des fonctions de dépendances externes, priviligiez cette écriture : package::fonction().\r\n\r\n\r\nDocumentation\r\nMaintenant, documentez votre/vos fonctions. C’est essentiel ! Pour cela,\r\najoutez un entête roxygen2 à vos fonctions. Cette syntaxe permet de documenter efficacement toute fonction .\r\nCette entête devra contenir (a minima) un titre, une description de chaque argument et le retour de la fonction.\r\nProposition de documentation (essayer de ne pas regarder)\r\n\r\n\r\nShow code\r\n\r\n#' Download PanTHERIA dataset\r\n#'\r\n#' @description \r\n#' This function downloads the PanTHERIA dataset (text file) hosted on the \r\n#' GitHub repository <https://github.com/rdatatoolbox/datarepo/>. The file\r\n#' won't be downloaded if already exists locally (except if `overwrite = TRUE`).\r\n#' The file `PanTHERIA_1-0_WR05_Aug2008.txt` will be stored in \r\n#' `data/pantheria/`. This folder will be created if required.\r\n#' \r\n#' @param overwrite a `logical`. If `TRUE`, the file will be downloaded again \r\n#'   and the previous version will be erased.\r\n#'\r\n#' @return No return value.\r\n#' \r\n#' @export\r\n\r\ndl_pantheria_data <- function(overwrite = FALSE) { ... }\r\n\r\n\r\nOptionnel : transpilez vos entêtes roxygen2 en fichiers .Rd, seuls fichiers acceptés par  pour documenter des fonctions. Ces fichiers .Rd seront stockés dans le dossier man/.\r\n\r\n\r\n## Génération de la doc ----\r\ndevtools::document()\r\n\r\n\r\nL’aide de votre fonction est maintenant accessible via ?nom_fonction.\r\n\r\n Bonne pratique #6\r\n\r\nPensez aux autres (et au vous du futur) : documentez toujours votre code. Un code sans documentation est inutile. Utilisez les entêtes roxygen2 pour documenter vos fonctions, de simples commentaires pour documenter du code et des README pour tout le reste.\r\n\r\n\r\nAjout des dépendances\r\nNos fonctions contiennent des dépendances à deux packages externes : utils et here. Nous devons ajouter ces dépendances au fichier DESCRIPTION.\r\n\r\n\r\n## Ajout de dépendances ----\r\nrcompendium::add_dependencies(compendium = \".\")\r\n\r\n\r\nRegardez le contenu du fichier DESCRIPTION. Par défaut, les packages requis sont listés sous le tag Imports. Ainsi, pour utiliser une fonction externe, il faudra l’appeler par package::fonction(). Si vous remplacer le tag Imports par Depends, l’utilisation de la fonction remotes::load_all() (voir plus bas) aura le même effet qu’un library() et vous pourrez utiliser une fonction externe par fonction().\r\nLa fonction rcompendium::add_dependencies() va scanner chaque fichier .R et .Rmd du compendium et détecter les packages externes utilisés pour les ajouter automatiquement au fichier DESCRIPTION.\r\n\r\n Bonne pratique #7\r\n\r\nListez toujours les packages requis dans le fichier DESCRIPTION. Ainsi, vous centralisez la liste des packages requis en un seul endroit et vous pourrez utiliser les fonctions remotes::install_deps() et devtools::load_all().\r\n\r\n\r\nChargement du projet\r\nMaintenant que notre compendium contient les éléments clés d’un package , c.-à-d. un fichier DESCRIPTION et un répertoire R/, nous pouvons utiliser les outils de développement des packages  pour réaliser deux tâches.\r\nLes packages requis peuvent être installés (ou mis à jour) à l’aide de la\r\nfonction remotes::install_deps(). Pour être plus reproductible, vous pouvez désactiver les mises à jour en ajoutant l’argument upgrade = \"never\". Cette fonction vient remplacer la fonction install.packages(). Elle va lire le fichier DESCRIPTION pour récupérer la liste des packages requis. Il est donc important d’utiliser régulièrement la fonction rcompendium::add_dependencies(\".\") pour tenir ce fichier à jour.\r\nLes fonctions  stockées dans le dossier R/ peuvent être chargées avec la fonction devtools::load_all(). Cette fonction vient remplacer la fonction source() (et library() si les packages requis sont listés sous le tag Depends dans le fichier DESCRIPTION). Ce qui est pratique dans le cas où on doit charger de nombreux fonctions . Après chaque modification d’une fonction , n’oubliez pas d’exécuter la fonction devtools::load_all().\r\nEssayez ces deux fonctions.\r\n\r\n Bonne pratique #8\r\n\r\nAvec un fichier DESCRIPTION (listant les dépendances requises) et un dossier R/, vous pouvez utiliser les fonctions remotes::install_deps() (installation/mise à jour des dépendances) et devtools::load_all() (chargement du projet) au lieu de install.packages(), library() et source().\r\n\r\n\r\nAjout d’un make.R\r\nAfin d’automatiser notre projet, nous allons créer un script  à la racine du projet. Nous l’appelerons, par convention, make.R. Celui-ci aura deux objectifs : 1) mettre en place le projet et 2) exécuter le projet. L’idée est de n’exécuter que ce script. Utilisez la fonction rcompendium::add_makefile() et lisez le contenu du nouveau fichier créé.\r\n\r\n\r\n## Ajout d'un makefile ----\r\nrcompendium::add_makefile()\r\n\r\n\r\n\r\n Bonne pratique #9\r\n\r\nBien que non essentiel, un fichier make.R placé à la racine du projet permet de facilement mettre en place le projet (installation et chargement des packages requis et des fonctions ) et d’exécuter les différentes analyses de manière séquentielle (en sourçant les scripts  qui appellent eux-même les fonctions ). C’est la porte d’entrée du projet.\r\n\r\n\r\nAnalyses\r\nJusqu’à présent, nous n’avons fait que définir des fonctions , mais nous ne les avons pas exécutées. Nous allons créer notre premier script  dans le dossier analyses/. Celui-ci aura pour objectif d’appeler les fonctions  définies précédemment pour télécharger les données.\r\nCréez un nouveau script  comme suit et éditez-le:\r\n\r\n\r\n## Ajout d'un script R ----\r\nutils::file.edit(here::here(\"analyses\", \"download-data.R\"))\r\n\r\n\r\nProposition de contenu (essayer de ne pas regarder)\r\n\r\n\r\nShow code\r\n\r\n# Download project raw data\r\n#\r\n# This script will download the PanTHERIA and WWF WildFinder datasets. The\r\n# four files will be stored in `data/`.\r\n# \r\n# All functions used in the script have been developed for this project\r\n# and can be found in the folder R/.\r\n#\r\n# Jane Doe <jane.doe@mail.me>\r\n# 2022/11/16\r\n\r\n## Download PanTHERIA database ----\r\n\r\ndl_pantheria_data(overwrite = FALSE)\r\n\r\n\r\n## Download WWF WildFinder database ----\r\n\r\n# ...\r\n\r\n\r\nN.B. Nous verrons plus tard comment transformer ce script  en un fichier Rmarkdown.\r\nFinalement, ajoutez une ligne dans le fichier make.R qui sourcera ce script.\r\nUtilisez les fonctions source() et here::here() pour cela.\r\nPour charger le projet et lancer les analyses, il suffit d’exécuter ce fichier make.R.\r\n\r\n Bonne pratique #10\r\n\r\nLe dossier analyses/ contient les scripts  qui appellent les fonctions . Il peut être ignoré dans le cas de simples analyses. Le code de l’analyse devra alors se trouver dans le make.R. A contrario, dans le cas d’analyses complexes, n’hésitez pas à multiplier les scripts  (plutôt que d’avoir un seul gros script).\r\n\r\n\r\nAjout d’un README\r\nPlus tard, vous verrez comment envoyer ce projet sur GitHub. Pour l’instant, nous allons légèrement anticiper les cours suivants, et ajouter un README à notre compendium. Ce sera la vitrine du projet. Les rôles d’un README sont : 1) de présenter le projet, 2) d’expliquer son contenu, et 3) d’expliquer comment l’installer et l’utiliser.\r\nPour cela, vous allez ajouter un README.Rmd (fichier Rmarkdown) à la racine de votre projet.\r\n\r\n\r\n## Ajout d'un README ----\r\nrcompendium::add_readme_rmd(type = \"compendium\")\r\n\r\n\r\nAdaptez son contenu et n’oubliez pas de transpiler ce fichier .Rmd en un fichier .md (fichier Markdown lu par GitHub). Utilisez le bouton Knit de RStudio ou :\r\n\r\n\r\n## Conversion du README.Rmd en README.md ----\r\nrmarkdown::render(\"README.Rmd\")\r\n\r\n\r\n N’oubliez pas aussi d’éditer les sections Title et Description du fichier DESCRIPTION.\r\n\r\n Bonne pratique #11\r\n\r\nAjoutez un README à votre projet afin d’aider l’utilisateur à comprendre votre projet.\r\n\r\n\r\n\r\n Félicitation : votre research compendium est maintenant fonctionnel !\r\n\r\n\r\nBonus\r\nEcrivez une fonction  qui va télécharger le fichier README.md du dépôt https://github.com/rdatatoolbox/datarepo/ et enregistrez-le dossier data/. Vous ajouterez ainsi la description des données à votre projet (conservez uniquement la section Data description).\r\nProposition de fonction (essayer de ne pas regarder)\r\n\r\n\r\nShow code\r\n\r\n#' Download data description (README)\r\n#'\r\n#' @description \r\n#' This function downloads the `README.md` of the GitHub repository\r\n#' <https://github.com/rdatatoolbox/datarepo/> providing data description.\r\n#' The file won't be downloaded if already exists locally (except if \r\n#' `overwrite = TRUE`).\r\n#' The `README.md` will be stored in `data/`.\r\n#' \r\n#' @param overwrite a logical. If `TRUE`, the file will be downloaded again and\r\n#'   the previous version will be erased.\r\n#'\r\n#' @return No return value.\r\n#' \r\n#' @export\r\n\r\ndl_data_descr <- function(overwrite = FALSE) {\r\n  \r\n  ## Destination location ---- \r\n  path <- here::here(\"data\")\r\n  \r\n  ## File name ----\r\n  filename <- \"README.md\"\r\n  \r\n  ## GitHub URL ----\r\n  url <- \"https://raw.githubusercontent.com/rdatatoolbox/datarepo/main/\"\r\n  \r\n  if (file.exists(file.path(path, filename)) && !overwrite) {\r\n    \r\n    ## Check if exists locally ----\r\n    message(\"The filename already exists. Use 'overwrite = TRUE' to replace it\")\r\n    \r\n  } else {\r\n    \r\n    ## Create destination folder ----\r\n    dir.create(path, showWarnings = FALSE, recursive = TRUE)\r\n    \r\n    ## Download file ----\r\n    utils::download.file(url = paste0(url, filename),\r\n                         destfile = file.path(path, filename))\r\n  }\r\n\r\n  invisible(NULL) \r\n}\r\n\r\n\r\n\r\n\r\n\r\nL’ensemble de ces étapes peut être réalisé avec une seule fonction :\r\nrcompendium::new_compendium().\r\nN’oubliez pas de créer un nouveau projet RStudio avant.\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-11-08T16:56:13+01:00"
    },
    {
      "path": "ex-docker.html",
      "title": "Docker",
      "author": [],
      "contents": "\r\n\r\nContents\r\nConsignes\r\n\r\n\r\n\r\nL’objectif de cet exercice est de vous familiariser avec l’utilisation de Docker, et plus particulièrement avec la création d’un Dockerfile.\r\n\r\n\r\nConsignes\r\nNous allons ajouter un Dockerfile au research compendium créé lors de l’exercice 5.\r\nUtilisez la fonction rcompendium::add_dockerfile() (désactivez temporairement renv avec renv::deactivate() le temps d’utiliser cette fonction, puis réactivez-le avec renv::activate())\r\nRéfléchissez si la version de l’image de base rocker/rstudio:4.2.2 est la plus appropriée à votre projet\r\nRegardez le contenu du README.Rmd (doit-il être transpilé ?)\r\nSi vous avez  d’installé, suivez les instructions du README.Rmd pour construire votre image, démarrez un conteneur et relancer les analyses.\r\n Pensez aux commits !\r\n\r\n\r\n\r\n",
      "last_modified": "2023-11-08T16:56:13+01:00"
    },
    {
      "path": "ex-github.html",
      "title": "Git & GitHub",
      "author": [],
      "contents": "\r\n\r\nContents\r\nPartie I\r\nPartie II\r\n\r\n\r\n\r\nL’objectif de cet exercice est de vous familiariser avec l’utilisation de git et .\r\n\r\n\r\nPartie I\r\n Mettez-vous par groupe de 4 personnes\r\nChacun se crée un nouveau dépôt sur GitHub\r\nSous RStudio, créez un nouveau projet à partir d’un dépôt GitHub (Version control)\r\nAjoutez un fichier .md qui contient votre recette de pizza\r\nLe suivre (stage), faire des changements (commit), envoyer sur GitHub (push)\r\nSur GitHub, allez dans les Settings et ajoutez une personne de votre groupe comme collaborateur de votre projet (les recettes à deux c’est mieux)\r\nHorreur  Vous vous rendez compte que les autres membres de votre groupe ont oublié des ingrédients importants dans leur recette : les olives noires, les anchois marinés et le gorgonzola.\r\n Mettez en oeuvre 3 solutions pour interagir avec eux et leur faire remarquer que leur recette peut être améliorée. En fonction de votre statut dans le projet et votre souhait de vous impliquer :\r\nUtilisez les Issues pour dire au développeur que sa recette peut être améliorée\r\nSi vous êtes collaborateur, Clonez le dépôt, faites les modifications et envoyez-les\r\nSi vous ne l’êtes pas, Forkez, Clonez, et essayez la Pull request\r\n\r\nPartie II\r\nRetour à l’exercice 1 (Research compendium)\r\n Vous allez envoyer votre research compendium créé à l’Exercice 1\r\nsur votre compte GitHub.\r\n\r\n\r\nCette approche est appelée GitHub Last : on crée d’abord le projet en local, puis on crée le dépôt GitHub. L’exercice sur les pizzas présentait l’approche GitHub First : on crée d’abord le dépôt GitHub, puis on le clone localement. Pour plus d’information : GitHub First et\r\nGitHub Last.\r\n\r\nVous pouvez utiliser la fonction usethis::use_github() qui va créer pour vous le dépôt GitHub correspondant (en utilisant l’API GitHub). Vous devez avoir sauvegarder localement votre GitHub Personal Access Token (PAT). Voir ici pour plus d’information\r\n\r\n\r\n## Création du dépôt GitHub ----\r\nusethis::use_github()\r\n\r\n\r\nSi cela ne fonctionne pas, rendez-vous sur GitHub, créez un nouveau projet VIDE (donnez juste un nom de dépôt) et copier les instructions (Push an existing repository from the command line) dans un terminal.\r\n\r\n\r\n Félicitation : votre research compendium est maintenant sur GitHub !\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-11-08T16:56:14+01:00"
    },
    {
      "path": "ex-package.html",
      "title": "R Package",
      "author": [],
      "contents": "\r\n\r\nContents\r\nConsignes\r\nBonus\r\n\r\n\r\n\r\nL’objectif de cet exercice est de vous familiariser avec la création de package .\r\n\r\n\r\nConsignes\r\nCréez un nouveau projet RStudio et le dépôt GitHub correspondant (vice-versa).\r\nUtilisez la fonction rcompendium::add_description() pour créer un fichier DESCRIPTION\r\nUtilisez la fonction rcompendium::add_to_gitignore() pour créer un .gitignore spécifique à \r\nImplémentez des fonctions  dans le dossier R/ et documentez-les. Vous pouvez réutiliser certaines fonctions développées lors des exercices précédents.\r\nMettez à jour la documentation des fonctions avec devtools::document()\r\nMettez à jour les dépendances dans le fichier DESCRIPTION avec rcompendium::add_dependencies()\r\nVérifiez que votre package ne comporte pas d’erreur avec devtools::check()\r\nAjoutez un README.Rmd avec rcompendium::add_readme_rmd() et éditez-le (n’oubliez pas de le transpiler en README.md)\r\n Pensez aux commits !\r\n\r\nBonus\r\n Mettez en place des GitHub Actions pour :\r\nVérifiez votre package sur les serveurs GitHub après chaque push avec rcompendium::add_github_actions_check()\r\nDéployer le site Web du package avec rcompendium::add_github_actions_pkgdown()\r\nAjoutez au README les badges correspondants avec : rcompendium::add_github_actions_pkgdown_badge() rcompendium::add_github_actions_check_badge()\r\n\r\n\r\n\r\nL’ensemble de ces étapes (et bien d’autres) peut être réalisé avec une seule fonction :\r\nrcompendium::new_package().\r\nN’oubliez pas de créer un nouveau projet RStudio avant si vous souhaitez la tester.\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2023-11-08T16:56:15+01:00"
    },
    {
      "path": "ex-renv.html",
      "title": "Renv",
      "author": [],
      "contents": "\r\n\r\nContents\r\nConsignes\r\n\r\n\r\n\r\nL’objectif de cet exercice est de vous familiariser avec l’utilisation de renv, package  permettant de gérer les versions de packages requises par le projet.\r\n\r\n\r\nConsignes\r\nNous allons intégrer renv au research compendium créé lors de l’exercice 4.\r\nUtilisez la fonction rcompendium::add_renv()\r\nAjoutez le dossier renv/ et le ficher .Rprofile au .gitignore (afin de ne pas envoyer sur GitHub les packages - seul le renv.lock suffit)\r\nJouez avec les fonctions renv::status(), renv::install() et renv::snapshot() (n’oubliez pas de mettre à jour la liste des dépendances dans le fichiers DESCRIPTION)\r\nModifiez le make.R de manière à installer les packages via renv plutôt qu’avec la fonction devtools::install_deps()\r\nVérifiez si votre projet est encore exécutable en source le make.R\r\n Pensez aux commits !\r\n\r\n\r\n\r\n",
      "last_modified": "2023-11-08T16:56:15+01:00"
    },
    {
      "path": "ex-rmarkdown.html",
      "title": "Rmarkdown",
      "author": [],
      "contents": "\r\n\r\nContents\r\nConsignes\r\nBonus\r\n\r\n\r\n\r\nL’objectif de cet exercice est de vous familiariser à l’utilisation de Rmarkdown. Plus précisément, vous verrez comment exécuter l’ensemble des analyses et la rédaction dans un même fichier .Rmd.\r\n\r\n\r\nConsignes\r\nNous allons utiliser les données WildFinder du WWF pour répondre à la question suivante :\r\nDans combien d’écorégions différentes retrouve-t-on chaque espèce d’Ursidés ?\r\nPour ce faire, continuez à travailler dans le research compendium créé lors de l’exercice 1 et écrivez des fonctions\r\n pour :\r\nImporter chaque fichier csv (utiliser la fonction readr::read_csv())\r\nSélectionner uniquement les espèces de la famille des Ursidae\r\nJoindre les trois tables entre elles\r\nCompter le nombre d’écorégions où se retrouve chaque espèce\r\nFaire une visualisation graphique montrant le nombre d’écorégions par espèce\r\nPuis, créez un fichier index.Rmd à la racine du projet qui appellera chaque fonction créée précédemment. Devrons figurer dans le document final, a minima, le résultat demandé sous forme de tableau (fonction knitr::kable()) et de figure, ainsi que la source des données.\r\nFinalement, ajoutez une ligne de code dans votre make.R qui permettra de transpiler votre index.Rmd en version index.html (fonction rmarkdown::render()).\r\n Pensez aux commits ! Pensez aussi à mettre à jour la liste des dépendances dans le fichiers DESCRIPTION.\r\n\r\nBonus\r\nSi votre code est bien écrit, vous pouvez rapidement l’exécuter avec une autre famille de Mammifères !\r\n\r\n\r\n\r\n",
      "last_modified": "2023-11-08T16:56:16+01:00"
    },
    {
      "path": "ex-targets.html",
      "title": "Targets",
      "author": [],
      "contents": "\r\n\r\nContents\r\nConsignes\r\n\r\n\r\n\r\nL’objectif de cet exercice est de vous familiariser avec l’utilisation de targets, package  permettant d’optimiser le flux de travail.\r\n\r\n\r\nConsignes\r\nNous allons intégrer targets au research compendium créé lors de l’exercice 3.\r\nAvant toute chose, supprimez la ligne devtools::load_all() du fichier make.R : cette fonction n’est pas prise en compte par targets pour charger les fonctions.\r\nPuis, procédez comme suit :\r\nEcrivez votre plan d’analyses dans un fichier _targets.R placé à la racine du projet. N’oubliez d’attacher les packages targets et tarchetypes avec la fonction library() et de sourcer les différentes fonctions avec source().\r\nLe dernier élément du pipeline sera le rapport index.Rmd vu à l’exercice précédent. Cependant, celui-ci n’exécutera aucune fonction créée (celles-ci seront gérées par targets). Le fichier Rmd se contentera d’importer les outputs : vous devrez exporter la figure (avec une nouvelle fonction) dans le dossier figures/. L’affichage du tableau résultat pourra se faire avec les fonctions targets::tar_read() et/ou targets::tar_load().\r\nFinalement, dans le fichier make.R remplacez la ligne rmarkdown::render() par tar::tar_make()\r\n Pensez aux commits ! Pensez aussi à mettre à jour la liste des dépendances dans le fichiers DESCRIPTION.\r\n\r\n\r\n\r\n",
      "last_modified": "2023-11-08T16:56:17+01:00"
    },
    {
      "path": "index.html",
      "title": "Reproducible Research in Computational Ecology",
      "description": "FRB-CESAB & GdR EcoStat training course\n<br><br>\n<a href=\"https://www.fondationbiodiversite.fr/en/the-frb-in-action/programs-and-projects/le-cesab/develop-skills/best-practice-for-reproducible-research-in-computational-ecology/\">\n  <img class=\"logo\" src=\"https://raw.githubusercontent.com/rdatatoolbox/.github/main/profile/banner-rdatatoolbox_150dpi.png\" style=\"width: 100%;\" />\n<\/a>\n",
      "author": [
        {
          "name": "Nicolas Casajus",
          "url": "https://nicolascasajus.fr"
        },
        {
          "name": "Iago Bonnici",
          "url": "https://isem-evolution.fr/en/membre/bonnici/"
        },
        {
          "name": "Stéphane Dray",
          "url": "https://lbbe.univ-lyon1.fr/fr/annuaires-des-membres/dray-stephane"
        },
        {
          "name": "Olivier Gimenez",
          "url": "https://oliviergimenez.github.io"
        },
        {
          "name": "Loreleï Guéry",
          "url": "https://orcid.org/0000-0003-3004-8462"
        },
        {
          "name": "François Guilhaumon",
          "url": "https://fguilhaumon.gitlab.io/"
        },
        {
          "name": "Nina Schiettekatte",
          "url": "http://www.criobe.pf/pro/personnel/doctorants/nina-schiettekatte/"
        },
        {
          "name": "Aurélie Siberchicot",
          "url": "https://lbbe.univ-lyon1.fr/fr/annuaires-des-membres/siberchicot-aurelie"
        }
      ],
      "date": "`r format(Sys.Date(), '%m-%d-%Y')`",
      "contents": "\r\n\r\n\r\n \r\nPre-registrations for the 2023 training course session are closed.\r\n\r\n\r\nThe objective of this five-day training course, co-organized by the\r\nFRB-CESAB\r\nand the\r\nGdR EcoStat,\r\nis to train young researchers in reproducibility, software development and\r\nversion management tools (e.g. Git, GitHub, R Markdown, Quarto, renv, Docker),\r\napplied to biodiversity research.\r\nN.B. This training course is in French, but some slides are available in English in the tab Courses/.\r\n\r\nProgram\r\n\r\n\r\nMonday\r\n\r\n\r\nOpen science & Reproducible research\r\n\r\n\r\nResearch compendium & Good practices\r\n\r\n\r\nVersion control with Git & GitHub\r\n\r\n\r\nTuesday\r\n\r\n\r\nLiterate programing: R Markdown & Quarto\r\n\r\n\r\nPipeline toolkit with targets\r\n\r\n\r\nWednesday\r\n\r\n\r\nDealing with R package versions with renv\r\n\r\n\r\nContainerization with Docker\r\n\r\n\r\nBuilding an R package\r\n\r\n\r\nThursday\r\n\r\n\r\nSubgroups projects\r\n\r\n\r\nFriday\r\n\r\n\r\nSubgroups projects\r\n\r\n\r\nPrerequisites\r\nPlease follow this tutorial to install\r\nyour working environment before attending the training course.\r\nYou also need to create an account on GitHub.\r\n\r\nSee also\r\nDiscover the other training courses provided by the FRB-CESAB and its partners: https://frbcesab.github.io/training-courses/\r\nCitation\r\nCasajus N, Bonnici I, Dray S, Gimenez O, Guéry L, Guilhaumon F, Schiettekatte NMD\r\n& Siberchicot A (2023)\r\nFRB-CESAB & GdR EcoStat training course: Reproducible Research in Computational Ecology.\r\nZenodo. http://doi.org/10.5281/zenodo.4262978.\r\n\r\n\r\n\r\n",
      "last_modified": "2023-11-08T16:56:17+01:00"
    }
  ],
  "collections": []
}
