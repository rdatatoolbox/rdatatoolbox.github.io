[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Research in Computational Ecology",
    "section": "",
    "text": "Welcome\nThe objective of this five-day training course, co-organized by the FRB-CESAB and the GdR EcoStat, is to train young researchers in reproducibility, software development and version management tools (e.g. Git, GitHub, R Markdown, Quarto, renv, Docker), applied to biodiversity research.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#program",
    "href": "index.html#program",
    "title": "Reproducible Research in Computational Ecology",
    "section": "Program",
    "text": "Program\nMonday\n\nOpen science & Reproducible research\nProject organization & Good practices\nVersion control w/ Git (Part I)\n\nTuesday\n\nVersion control w/ Git (Part II)\nCollaboration & sharing w/ GitHub\n\nWednesday\n\nLiterate programming w/ Quarto\nPipeline optimization w/ targets\nDeveloping an  package\n\nThursday\n\nFreezing package versions w/ renv\nContainerization w/ Docker\nSubgroups projects\n\nFriday\n\nSubgroups projects",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Reproducible Research in Computational Ecology",
    "section": "Prerequisites",
    "text": "Prerequisites\n  Please follow this tutorial to install your working environment before attending the training course.\n  You also need to create an account on GitHub (please edit your profile and enter your name).",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#material",
    "href": "index.html#material",
    "title": "Reproducible Research in Computational Ecology",
    "section": "Material",
    "text": "Material\nAll the material used in this training course (slides, data, exercises) is available at: https://github.com/rdatatoolbox/",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "Reproducible Research in Computational Ecology",
    "section": "Citation",
    "text": "Citation\n\nCasajus N, Bonnici I, Dray S, Gimenez O, Guéry L, Guilhaumon F, Schiettekatte NMD & Siberchicot A (2024) FRB-CESAB & GdR EcoStat training course: Reproducible Research in Computational Ecology. Zenodo. URL: http://doi.org/10.5281/zenodo.4262978",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#contributions",
    "href": "index.html#contributions",
    "title": "Reproducible Research in Computational Ecology",
    "section": "Contributions",
    "text": "Contributions\nIf you see mistakes or want to suggest changes, please create an issue on the source repository.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#reuse",
    "href": "index.html#reuse",
    "title": "Reproducible Research in Computational Ecology",
    "section": "Reuse",
    "text": "Reuse\nText and figures are licensed under Creative Commons Attribution CC By 4.0, unless otherwise noted.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#see-also",
    "href": "index.html#see-also",
    "title": "Reproducible Research in Computational Ecology",
    "section": "See also",
    "text": "See also\nDiscover the other training courses provided by the FRB-CESAB and its partners: https://frbcesab.github.io/training-courses/",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "chapters/setting-up-r.html",
    "href": "chapters/setting-up-r.html",
    "title": "Setup R",
    "section": "",
    "text": "The guide to correctly install and configure a working environment for data science with , , and  is available at: https://frbcesab.github.io/rsetup/",
    "crumbs": [
      "Setup R"
    ]
  },
  {
    "objectID": "chapters/course-opensci.html",
    "href": "chapters/course-opensci.html",
    "title": "Reproducible research",
    "section": "",
    "text": "An introduction to open science and reproducible research\n\n\n\n   Author: François Guillaumon   Source: https://github.com/rdatatoolbox/course-opensci/   Slides: https://rdatatoolbox.github.io/course-opensci/",
    "crumbs": [
      "Courses",
      "Reproducible research"
    ]
  },
  {
    "objectID": "chapters/course-compendium.html",
    "href": "chapters/course-compendium.html",
    "title": "Research compendium",
    "section": "",
    "text": "An introduction to research compendium\n\n\n\n   Author: François Guillaumon   Source: https://github.com/rdatatoolbox/course-compendium/   Slides: https://rdatatoolbox.github.io/course-compendium/",
    "crumbs": [
      "Courses",
      "Research compendium"
    ]
  },
  {
    "objectID": "chapters/course-git.html",
    "href": "chapters/course-git.html",
    "title": "Version control w/ git",
    "section": "",
    "text": "An introduction to version control w/ git\n\n\n\n   Author: Iago Bonnici   Source: https://github.com/rdatatoolbox/course-git-iago/   Slides: https://rdatatoolbox.github.io/chapters/course-git.pdf",
    "crumbs": [
      "Courses",
      "Version control w/ `git`"
    ]
  },
  {
    "objectID": "chapters/course-github.html",
    "href": "chapters/course-github.html",
    "title": "Introduction to GitHub",
    "section": "",
    "text": "An introduction to code hosting platform w/ GitHub\n\n\n\n   Author: Aurélie Siberchicot   Source: https://github.com/rdatatoolbox/course-github/   Slides: https://rdatatoolbox.github.io/course-github/",
    "crumbs": [
      "Courses",
      "Introduction to `GitHub`"
    ]
  },
  {
    "objectID": "chapters/course-quarto.html",
    "href": "chapters/course-quarto.html",
    "title": "Literate programming w/ Quarto",
    "section": "",
    "text": "An introduction to literate programming w/ Quarto (and R Markdown)\n\n\n\n   Authors: François Guillaumon   Source: https://github.com/rdatatoolbox/course-quarto/   Slides: https://rdatatoolbox.github.io/course-quarto/",
    "crumbs": [
      "Courses",
      "Literate programming w/ `Quarto`"
    ]
  },
  {
    "objectID": "chapters/course-targets.html",
    "href": "chapters/course-targets.html",
    "title": "Pipeline toolkits w/ targets",
    "section": "",
    "text": "An introduction to pipeline toolkits w/ targets\n\n\n\n   Authors: François Guillaumon & Nina Schiettekatte   Source: https://github.com/rdatatoolbox/course-targets/   Slides: https://rdatatoolbox.github.io/course-targets/",
    "crumbs": [
      "Courses",
      "Pipeline toolkits w/ `targets`"
    ]
  },
  {
    "objectID": "chapters/course-renv.html",
    "href": "chapters/course-renv.html",
    "title": "Virtual environments w/ renv",
    "section": "",
    "text": "An introduction to renv: dealing with R package versions\n\n\n\n   Author: Nicolas Casajus   Source: https://github.com/rdatatoolbox/course-renv/   Slides: https://rdatatoolbox.github.io/course-renv/",
    "crumbs": [
      "Courses",
      "Virtual environments w/ `renv`"
    ]
  },
  {
    "objectID": "chapters/course-docker.html",
    "href": "chapters/course-docker.html",
    "title": "Containerization w/ Docker",
    "section": "",
    "text": "An introduction to containerization w/ Docker\n\n\n\n   Author: Nicolas Casajus   Source: https://github.com/rdatatoolbox/course-docker/   Slides: https://rdatatoolbox.github.io/course-docker/",
    "crumbs": [
      "Courses",
      "Containerization w/ `Docker`"
    ]
  },
  {
    "objectID": "chapters/course-package.html",
    "href": "chapters/course-package.html",
    "title": "Building an R package",
    "section": "",
    "text": "An introduction how on to create an R package\n\n\n\n   Authors: Aurélie Siberchicot & Nicolas Casajus   Source: https://github.com/rdatatoolbox/course-rpackage/   Slides: https://rdatatoolbox.github.io/course-rpackage/",
    "crumbs": [
      "Courses",
      "Building an R package"
    ]
  },
  {
    "objectID": "chapters/ex-compendium.html",
    "href": "chapters/ex-compendium.html",
    "title": "Research compendium",
    "section": "",
    "text": "Objectif\n\n\n\nL’objectif de cet exercice est de créer un research compendium, c.-à-d. un dossier de travail dont la structure est dérivée de celle d’un package . Vous allez découvrir les fichiers importants que nous vous recommandons d’ajouter à un projet de recherche. Vous allez aussi apprendre à écrire et documenter des fonctions .\nCe research compendium servira de base de travail tout au long de la formation.\n\n\nNB. Cet exercice s’inspire du workshop proposé par Anna Krystalli.\n\n\nPréambule\nAfin de nous assister dans la création de la structure de notre dossier de travail, nous allons utiliser le package  rcompendium, développé dans le cadre de cette formation. Il permet d’automatiser la création des fichiers/répertoires spécifiques à un compendium/package .\nInstallez le package  rcompendium depuis GitHub :\n\n## Installation de 'remotes' ----\ninstall.packages(\"remotes\")\n\n## Installation de 'rcompendium' ----\nremotes::install_github(\"frbcesab/rcompendium\")\n\n## Chargement du package -----\nlibrary(\"rcompendium\")\n\n  Si vous rencontrez des difficultés à installer le package, lisez attentivement la section Installation du README.\nUne fois le package installé, vous devez exécuter la fonction set_credentials() afin de stocker localement vos informations personnelles (prénom, nom, email, ORCID, protocole de communication avec GitHub). Ces informations permettront de remplir automatiquement certains fichiers du compendium. Cette fonction n’est à utiliser qu’une seule fois.\n\n## Stockage de vos informations ----\nset_credentials(given    = \"Jane\",\n                family   = \"Doe\", \n                email    = \"jane.doe@mail.me\", \n                orcid    = \"0000-0000-0000-0000\", \n                protocol = \"ssh\")\n\nCes informations ont été copiées dans le presse-papier. Collez son contenu dans le fichier ~/.Rprofile (ouvert dans RStudio par cette fonction). Ce fichier est lu à chaque ouverture de  et son contenu sera accessible aux fonctions du package rcompendium.\nRedémarrez la session  (Session &gt; Restart R) et vérifiez que vos informations personnelles sont bien accessibles.\n\n## Vérification (après redémarrage de R) ----\ngetOption(\"email\")\n# [1] \"jane.doe@mail.me\"\n\ngetOption(\"family\")\n# [1] \"Doe\"\n\n\n\n\nProjet RStudio\nLorsque vous démarrez un nouveau projet sous , il est vivement conseillé d’utiliser les Projets RStudio.\n  Créez un nouveau Projet RStudio : File &gt; New Project &gt; New Directory &gt; New Project\n\nChoisissez un nom pour votre projet (sans signe de ponctuation), par ex. practice\nSélectionnez l’emplacement où le nouveau projet sera créé\nDécochez toutes les autres cases\nValidez\n\n\n\n\n\n\n\nBonne pratique #1\n\n\n\nToujours travailler dans un Projet RStudio. Cela présente l’avantage de simplifier les chemins d’accès aux fichiers, notamment avec le package  here et sa fonction here(). Les chemins d’accès seront toujours construits par rapport au dossier contenant le fichier .Rproj (racine du projet). On parle de chemin relatif. N’utilisez plus jamais la fonction setwd().\n\n\n\nStructure du compendium\npractice/                        # Root of the compendium\n|\n└─ practice.Rproj                # RStudio project file\n\n\n\n\nFichier README\nTout projet se doit de contenir un fichier README. C’est la vitrine du projet. Les rôles d’un README sont multiples :\n\nprésenter le projet\nexpliquer son contenu\nexpliquer comment l’installer\nexpliquer comment l’utiliser\n\nC’est un simple fichier texte (plain text-based file) qui peut être écrit au format texte (README.txt), en Markdown (README.md), en R Markdown (README.Rmd), en Quarto (README.qmd), etc.\n  Ici, vous allez créer un README.md (fichier texte écrit en Markdown) à la racine de votre projet.\n  Utilisez la fonction utils::file.edit() qui permet d’ouvrir un fichier dans l’éditeur de RStudio. Si ce fichier n’existe pas, elle va aussi le créer.\n\n## Ajout d'un README ----\nutils::file.edit(here::here(\"README.md\"))\n\n  Exécutez cette ligne de code dans la console : here::here(\"README.md\") et essayez de comprendre ce que fait la fonction here::here(). Comparez avec votre voisin.e.\n  Editez ce README.md en ajoutant les informations pertinentes.\nProposition de README\n\n\nCode\n# Practice\n\nThis project contains files to create a simple **research compendium** as \npresented in the training course \n[Reproducible Research in Computational Ecology](https://rdatatoolbox.github.io).\n\n\n## Content\n\nThis project is structured as follow:\n\n- `README.md`: presentation of the project\n- `compendium.Rproj`: RStudio project file\n\n\n## Installation\n\nComing soon...\n\n\n## Usage\n\nComing soon...\n\n\n## Citation\n\n&gt; Doe J (2024) Minimal structure of a research compendium.\n\n\n\n\n\n\n\n\nBonne pratique #2\n\n\n\nAjoutez un README à votre projet afin d’aider l’utilisateur à comprendre votre projet. Si vous souhaitez exécuter du code  à l’intérieur, écrivez-le en R Markdown (README.Rmd) ou Quarto (README.qmd), sinon utilisez simplement du Markdown (README.md).\nNB. Si vous écrivez un .Rmd ou un .qmd, n’oubliez pas de le transpiler en .md. GitHub n’est capable d’interpréter que les .md.\n\n## Conversion d'un Rmd en un md ----\nrmarkdown::render(\"README.Rmd\")\n\n## Conversion d'un qmd en un md ----\nquarto::quarto_render(\"README.qmd\")\n\n  Vous pouvez aussi cliquer sur le bouton Render de RStudio.\n\n\n\nStructure du compendium\npractice/                        # Root of the compendium\n|\n├─ practice.Rproj                # RStudio project file\n|\n└─ README.md                     # Presentation of the project\n\n\n\n\nFichier DESCRIPTION\nLe fichier DESCRIPTION décrit les métadonnées du projet (titre, auteur, description, dépendances requises, etc.). C’est un des éléments essentiels d’un package . Ici, nous allons le détourner pour l’utiliser dans le cadre d’un compendium afin de bénéficier des outils de développement de packages  (voir plus loin).\n  Ajoutez un fichier DESCRIPTION avec la fonction add_description() de rcompendium.\n\n## Ajout d'un fichier DESCRIPTION ----\nadd_description()\n\nPackage: practice\nType: Package\nTitle: The Title of the Project\nVersion: 0.0.0.9000\nAuthors@R: c(\n    person(given   = \"Jane\",\n           family  = \"Doe\",\n           role    = c(\"aut\", \"cre\", \"cph\"),\n           email   = \"jane.doe@mail.me\",\n           comment = c(ORCID = \"0000-0000-0000-0000\")))\nDescription: A paragraph providing a full description of the project (on \n    several lines...)\nLicense: {{license}}\nEncoding: UTF-8\nComme vous le voyez, le fichier DESCRIPTION a été pré-rempli avec vos informations personnelles. Vous éditerez les champs Title et Description plus loin.\n\n\n\n\n\n\nBonne pratique #3\n\n\n\nToujours ajouter un fichier DESCRIPTION à la racine du projet. Il permet de décrire les métadonnées du projet : titre, auteur(s), description, licence, etc. Nous le verrons plus loin, mais c’est aussi l’endroit idéal pour lister les packages externes requis.\n\n\n\nStructure du compendium\npractice/                        # Root of the compendium\n|\n├─ practice.Rproj                # RStudio project file\n|\n├─ README.md                     # Presentation of the project\n└─ DESCRIPTION                   # Project metadata\n\n\n\n\nChoix d’une Licence\nTout matériel partagé en ligne doit disposer d’une licence qui décrit ce qu’il est possible de faire avec. Ainsi, nous vous recommandons d’ajouter dès le début du projet une licence. Pour savoir quelle licence est la plus appropriée à votre projet, vous pouvez vous rendre sur ce site : https://choosealicense.com.\n  Ajoutez la licence GPL-2 à votre projet à l’aide de la fonction add_license() de rcompendium.\n\n## Ajout d'une licence ----\nadd_license(license = \"GPL-2\")\n\nNotez qu’un nouveau fichier a été créé : LICENSE.md. Celui-ci détaille le contenu de la license choisie et sera lu par GitHub. Regardez aussi le contenu du fichier DESCRIPTION : la section License a été mise à jour grâce à rcompendium.\n  Ajoutez une section au README.md mentionnant la licence.\nProposition de README\n\n\nCode\n# Practice\n\nThis project contains files to create a simple **research compendium** as \npresented in the training course \n[Reproducible Research in Computational Ecology](https://rdatatoolbox.github.io).\n\n\n## Content\n\nThis project is structured as follow:\n\n- `README.md`: presentation of the project\n- `compendium.Rproj`: RStudio project file\n\n\n## Installation\n\nComing soon...\n\n\n## Usage\n\nComing soon...\n\n\n## License\n\nThis project is released under the \n[GPL-2 license](https://choosealicense.com/licenses/gpl-2.0/).\n\n\n## Citation\n\n&gt; Doe J (2024) Minimal structure of a research compendium.\n\n\n\n\n\n\n\n\nBonne pratique #4\n\n\n\nToujours ajouter une LICENCE à un projet qui sera rendu public. Visitez le site Choose a License pour choisir la plus appropriée à votre projet.\nNB. Si aucune licence n’est renseignée, votre projet sera soumis aux règles de la No License : aucune permission n’est accordée. En d’autres termes, personne ne peut rien faire avec votre projet (pas d’utilisation, pas de modification, pas de partage, etc.).\n\n\n\nStructure du compendium\npractice/                        # Root of the compendium\n|\n├─ practice.Rproj                # RStudio project file\n|\n├─ README.md                     # Presentation of the project\n├─ DESCRIPTION                   # Project metadata\n└─ LICENSE.md                    # License of the project\n\n\n\n\nSous-répertoires\nLa prochaine étape consiste en la création de sous-répertoires, chacun ayant un rôle précis. L’idée ici est de séparer les données, les résultats et le code.\n  Pour cela, utilisez la fonction add_compendium() de rcompendium.\n\n## Ajout de sous-répertoires ----\nadd_compendium(compendium = c(\"data\", \"analyses\", \"R\", \"figures\", \"outputs\"))\n\n\n\n\n\n\n\nBonne pratique #5\n\n\n\nUn bon Research compendium sera composé de différents sous-répertoires, chacun destiné à accueillir un certain type de fichiers. Par ex.,\n\nle dossier data/ contiendra toutes les données brutes nécessaires au projet\nle dossier outputs/ contiendra tous les résultats générés (hors figures)\nle dossier figures/ contiendra toutes les figures produites par les analyses\nle dossier R/ ne contiendra que des fonctions  (et leurs documentations). Voir plus loin\nle dossier analyses/ contiendra des scripts  (ou des fichiers .Rmd et/ou .qmd) qui appeleront les fonctions \n\nNB. Cette structure peut bien sûr être adaptée selon les besoins, les pratiques de chacun et la complexité du projet. A l’exception du dossier R/, tous les autres répertoires peuvent être nommés différemment.\n\n\n\nStructure du compendium\npractice/                        # Root of the compendium\n|\n├─ practice.Rproj                # RStudio project file\n|\n├─ README.md                     # Presentation of the project\n├─ DESCRIPTION                   # Project metadata\n├─ LICENSE.md                    # License of the project\n|\n├─ data/                         # Contains raw data\n├─ outputs/                      # Contains results\n├─ figures/                      # Contains figures\n├─ R/                            # Contains R functions (only)\n└─ analyses/                     # Contains R scripts\n\n\n\n\nCode \nNous voilà fin prêt à coder !\nLe dépôt GitHub https://github.com/rdatatoolbox/datarepo contient les données que nous utiliserons tout au long de la formation. Celles-ci proviennent de deux bases de données : PanTHERIA et WWF WildFinder. Lisez attentivement le README pour plus de détails.\n  L’objectif ici est d’écrire un code   qui va télécharger les quatre fichiers hébergés sur le dépôt GitHub mentionné ci-dessus.\nNous allons commencer par écrire notre code dans un script. Le fichier de données PanTHERIA, disponible ici, sera enregistré dans le sous-répertoire data/pantheria/ et les trois fichiers de données WWF WildFinder, disponibles ici, seront enregistrés dans le sous-répertoire data/wildfinder/.\n  Créez, dans le dossier analyses/, le script download-data.R à l’aide de la fonction utils::file.edit().\n\n## Ajout d'un script R ----\nutils::file.edit(here::here(\"analyses\", \"download-data.R\"))\n\n Utilisez les fonctions dir.create() pour créer des sous-répertoires, here::here() pour construire vos chemins et utils::download.file() pour télécharger les fichiers.\nProposition de code pour PanTHERIA (essayez de ne pas regarder)\n\n\nCode\n## Destination path ---- \npath &lt;- here::here(\"data\", \"pantheria\")\n\n## Create destination directory ----\ndir.create(path, showWarnings = FALSE, recursive = TRUE)\n\n## File name ----\nfilename &lt;- \"PanTHERIA_1-0_WR05_Aug2008.txt\"\n  \n## GitHub base URL ----\nbase_url &lt;- \"https://raw.githubusercontent.com/rdatatoolbox/datarepo/main/data/pantheria/\"\n\n## Build full URL ----\nfull_url &lt;- paste0(base_url, filename)\n\n## Build full path ----\ndest_file &lt;- file.path(path, filename)\n\n## Download file ----\nutils::download.file(url      = full_url,\n                     destfile = dest_file,\n                     mode     = \"wb\")\n\n\n\n\n\n\n\n\nBonne pratique #6\n\n\n\nEssayez de scripter l’intégralité du travail. Ici, nous avons vu comment créer des fichiers (utils::file.edit()) et des répertoires (dir.create()), construire des chemins relatifs robustes (here::here()) et télécharger des fichiers (utils::download.file()) directement à partir de .\n\n\n\nStructure du compendium\npractice/                                     # Root of the compendium\n|\n├─ practice.Rproj                             # RStudio project file\n|\n├─ README.md                                  # Presentation of the project\n├─ DESCRIPTION                                # Project metadata\n├─ LICENSE.md                                 # License of the project\n|\n├─ data/                                      # Contains raw data\n|  ├─ pantheria/                              # PanTHERIA database\n|  |  └─ PanTHERIA_1-0_WR05_Aug2008.txt\n|  └─ wildfinder/                             # WWF WildFinder database\n|     ├─ wildfinder-ecoregions_list.csv\n|     ├─ wildfinder-ecoregions_species.csv\n|     └─ wildfinder-mammals_list.csv\n|\n├─ outputs/                                   # Contains results\n├─ figures/                                   # Contains figures\n├─ R/                                         # Contains R functions (only)\n|\n└─ analyses/                                  # Contains R scripts\n   └─ download-data.R                         # Script to download raw data\n\n\n\n\n\n\n\nPackages externes\n\n\n\nPour utiliser une fonction d’un package externe, vous avez appris à utiliser library(\"package\"). Sous , il existe une autre syntaxe pour appeler une fonction d’un package externe : package::function(). Alors que library() charge et attache un package (rendant ses fonctions accessible directement avec function()), la syntaxe package::function() charge uniquement un package dans l’environnement de , mais n’attache pas son contenu. Ainsi, on est obligé de spécifier le nom du package en appelant la fonction.\nNous vous recommendons d’utiliser la syntaxe package::function(). Et ce pour deux raisons :\n\nmeilleure lisibilité du code : en un coup d’oeil, on sait dans quel package se trouve la fonction\nlimitation de conflits entre packages : deux fonctions peuvent avoir le même nom dans deux packages différentes. Par ex., le package dplyr propose une fonction filter() qui se trouve également dans le package stats (attaché à l’ouverture de ). Mais, les fonctions filter() de ces deux packages ne font pas la même chose.\n\n\nlibrary(\"dplyr\")\n\n## Attaching package: ‘dplyr’\n## \n## The following objects are masked from ‘package:stats’:\n## \n##     filter, lag\n## \n## The following objects are masked from ‘package:base’:\n## \n##     intersect, setdiff, setequal, union\n\nSi vous utilisez library(\"dplyr\"), vous ne serez jamais sûr à 100% d’utiliser la fonction filter() du package dplyr ou celle du package stats.\nCependant, pour des packages très verbeux (tels que ggplot2), vous pouvez utiliser la fonction library(), sinon votre code deviendra très vite fastidieux à écrire.\n  Si vous souhaitez utiliser le pipe %&gt;%, attachez le package magrittr avec library(\"magrittr\").\n\n\n\n\n\nFactorisation\nOn peut aller plus loin en découpant ce script en fonctions : on parle de factorisation de code. Une fonction est un ensemble de lignes de code regroupées en un seul bloc destiné à réaliser une tâche précise. Ecrire des fonctions rendra votre code plus clair et plus facilement réutilisable entre projets.\n  Placez toujours vos fonctions   dans un dossier nommé R/.\n  Factorisez le script précédent en deux fonctions :\n\nune fonction dl_pantheria_data() pour télécharger les données PanTHERIA, et\nune fonction dl_wildfinder_data() pour télécharger les données WWF WildFinder.\n\n  Utilisez la fonction usethis::use_r() pour créer deux fichiers .R dans le dossier R/.\n\n## Création du fichier pour la 1ere fonction ----\nusethis::use_r(\"dl_pantheria_data\")\n\nProposition de fonction (essayer de ne pas regarder)\n\n\nCode\ndl_pantheria_data &lt;- function() {\n  \n  ## Destination path ---- \n  path &lt;- here::here(\"data\", \"pantheria\")\n  \n  ## Create destination directory ----\n  dir.create(path, showWarnings = FALSE, recursive = TRUE)\n  \n  ## File name ----\n  filename &lt;- \"PanTHERIA_1-0_WR05_Aug2008.txt\"\n    \n  ## GitHub base URL ----\n  url &lt;- \"https://raw.githubusercontent.com/rdatatoolbox/datarepo/main/data/pantheria/\"\n  \n  ## Build full URL ----\n  full_url &lt;- paste0(base_url, filename)\n  \n  ## Build full path ----\n  dest_file &lt;- file.path(path, filename)\n\n  ## Download file ----\n  utils::download.file(url      = full_url,\n                       destfile = dest_file,\n                       mode     = \"wb\")\n  \n  return(dest_file)\n}\n\n\n\n\n\n\n\n\nBonne pratique #7\n\n\n\nEcrivez des fonctions : on parle de Factorisation de code. Cela rendra votre code plus clair et plus facilement réutilisable. Placez toujours vos fonctions  dans le dossier R/. Si vous utilisez des fonctions de dépendances externes, priviligiez cette écriture : package::fonction().\n\n\n\nStructure du compendium\npractice/                                     # Root of the compendium\n|\n├─ practice.Rproj                             # RStudio project file\n|\n├─ README.md                                  # Presentation of the project\n├─ DESCRIPTION                                # Project metadata\n├─ LICENSE.md                                 # License of the project\n|\n├─ data/                                      # Contains raw data\n|  ├─ pantheria/                              # PanTHERIA database\n|  |  └─ PanTHERIA_1-0_WR05_Aug2008.txt\n|  └─ wildfinder/                             # WWF WildFinder database\n|     ├─ wildfinder-ecoregions_list.csv\n|     ├─ wildfinder-ecoregions_species.csv\n|     └─ wildfinder-mammals_list.csv\n|\n├─ outputs/                                   # Contains results\n├─ figures/                                   # Contains figures\n├─ R/                                         # Contains R functions (only)\n|  ├─ dl_pantheria_data.R                     # Function to download PanTHERIA data\n|  └─ dl_wildfinder_data.R                    # Function to download WildFinder data\n|\n└─ analyses/                                  # Contains R scripts\n   └─ download-data.R                         # Script to download raw data\n\n\n\n\nDocumentation\nIl est temps de documenter vos fonctions. C’est essentiel ! Pour cela, nous allons utiliser la syntaxe roxygen2. Celle-ci permet de documenter facilement les fonctions  en plaçant un entête roxygen2 avant chaque fonction. Cet entête doit contenir (a minima) un titre, une description de chaque argument et le retour de la fonction.\n  Ajoutez un entête roxygen2 à vos deux fonctions pour les documenter.\nProposition de documentation (essayer de ne pas regarder)\n\n\nCode\n#' Download PanTHERIA dataset\n#'\n#' @description \n#' This function downloads the PanTHERIA dataset (text file) hosted on the \n#' GitHub repository &lt;https://github.com/rdatatoolbox/datarepo/&gt;.\n#' The file `PanTHERIA_1-0_WR05_Aug2008.txt` will be stored in \n#' `data/pantheria/`. This folder will be created if required.\n#'\n#' @return This function returns the path (`character`) to the downloaded file\n#' (e.g. `data/pantheria/PanTHERIA_1-0_WR05_Aug2008.txt`).\n#' \n#' @export\n\ndl_pantheria_data &lt;- function() { ... }\n\n\n\n\n\n\n\n\nBonne pratique #8\n\n\n\nPensez aux autres (et au vous du futur) : documentez toujours votre code. Un code sans documentation est inutile. Utilisez les entêtes roxygen2 pour documenter vos fonctions , de simples commentaires pour documenter du code et des README pour tout le reste.\n\n\n\nStructure du compendium\npractice/                                     # Root of the compendium\n|\n├─ practice.Rproj                             # RStudio project file\n|\n├─ README.md                                  # Presentation of the project\n├─ DESCRIPTION                                # Project metadata\n├─ LICENSE.md                                 # License of the project\n|\n├─ data/                                      # Contains raw data\n|  ├─ pantheria/                              # PanTHERIA database\n|  |  └─ PanTHERIA_1-0_WR05_Aug2008.txt\n|  └─ wildfinder/                             # WWF WildFinder database\n|     ├─ wildfinder-ecoregions_list.csv\n|     ├─ wildfinder-ecoregions_species.csv\n|     └─ wildfinder-mammals_list.csv\n|\n├─ outputs/                                   # Contains results\n├─ figures/                                   # Contains figures\n├─ R/                                         # Contains R functions (only)\n|  ├─ dl_pantheria_data.R                     # Function to download PanTHERIA data\n|  └─ dl_wildfinder_data.R                    # Function to download WildFinder data\n|\n└─ analyses/                                  # Contains R scripts\n   └─ download-data.R                         # Script to download raw data\n\n\n\n\n\n\n\nPour aller plus loin\n\n\n\nVous pouvez transpiler vos entêtes roxygen2 en fichiers .Rd, seuls fichiers acceptés par  pour documenter des fonctions. Ces fichiers .Rd seront stockés dans le dossier man/.\n\n## Génération de la doc ----\ndevtools::document()\n\nL’aide de votre fonction sera accessible via ?nom_fonction.\n\n\n\n\n\nAppel aux fonctions\nJusqu’à présent, nous n’avons fait que définir (et documenter) des fonctions , mais nous ne les avons pas exécuté.\n  Adaptez le contenu du script analyses/download-data.R créé précédemment afin qu’il appelle les fonctions dl_pantheria_data() et dl_wildfinder_data().\n\n## Ouverture du script précédent ----\nutils::file.edit(here::here(\"analyses\", \"download-data.R\"))\n\nProposition de contenu (essayer de ne pas regarder)\n\n\nCode\n# Download project raw data\n#\n# This script will download the PanTHERIA and WWF WildFinder datasets. The\n# four files will be stored in `data/`.\n# \n# All functions used in the script have been developed for this project\n# and can be found in the folder R/.\n#\n# Jane Doe &lt;jane.doe@mail.me&gt;\n\n## Download PanTHERIA database ----\npantheria_path  &lt;- dl_pantheria_data()\n\n\n## Download WWF WildFinder database ----\nwildfinder_path &lt;- dl_wildfinder_data()\n\n\n\n\n\n\n\n%%{init:{'theme':'neutral','flowchart':{'htmlLabels':false}}}%%\nflowchart LR\n  B(\"analyses/download-data.R\")\n  B --&gt; C(\"dl_pantheria_data()\")\n  B --&gt; D(\"dl_wildfinder_data()\")\n\n\n\n\n\n\n\n\n\n\n\n\nBonne pratique #9\n\n\n\nLe dossier analyses/ contient les scripts  qui appellent les fonctions  stockées dans le dossier R/. Dans le cas d’analyses complexes, n’hésitez pas à multiplier les scripts  (plutôt que d’avoir un seul gros script).\n\n\n\n\n\nAjout des dépendances\nNos fonctions contiennent des dépendances à deux packages externes : utils et here. Comme dit précédemment, le fichier DESCRIPTION est l’endroit idéal pour centraliser la liste des packages requis.\n  Ajoutez ces deux dépendances au fichier DESCRIPTION avec la fonction usethis::use_package().\n\n## Ajout des dépendances dans DESCRIPTION ----\nusethis::use_package(package = \"here\")\nusethis::use_package(package = \"utils\")\n\nRegardez le contenu du fichier DESCRIPTION : les deux packages requis sont listés dans la section Imports.\nPackage: practice\nType: Package\nTitle: The Title of the Project\nVersion: 0.0.0.9000\nAuthors@R: c(\n    person(given   = \"Jane\",\n           family  = \"Doe\",\n           role    = c(\"aut\", \"cre\", \"cph\"),\n           email   = \"jane.doe@mail.me\",\n           comment = c(ORCID = \"0000-0000-0000-0000\")))\nDescription: A paragraph providing a full description of the project (on \n    several lines...)\nLicense: GPL-2\nEncoding: UTF-8\nImports:\n    here,\n    utils\n\n\n\n\n\n\nBonne pratique #10\n\n\n\nListez toujours les packages requis dans le fichier DESCRIPTION. Ainsi, vous centralisez la liste des packages requis en un seul endroit et vous pourrez utiliser les fonctions devtools::install_deps() et devtools::load_all() (voir la section Chargement du projet).\n\n\n\n\n\n\n\n\nPour aller plus loin\n\n\n\nSi, dans votre code , vous souhaitez attacher vos packages avec library(), utilisez la fonction usethis::use_package() comme suit :\n\n## Ajout d'une dépendance forte ----\nusethis::use_package(package = \"ggplot2\", type = \"Depends\")\n\nLe package sera ajouté dans la section Depends du fichier DESCRIPTION.\n\n\n\n\n\nChargement du projet\nMaintenant que notre compendium contient un fichier DESCRIPTION avec une liste de packages, nous pouvons utiliser les outils de développement des packages  disponibles dans le package devtools pour :\n1) Installer les packages avec la fonction devtools::install_deps()\nCette fonction va lire le fichier DESCRIPTION pour récupérer la liste des packages requis dans les sections Depends et Imports et les installer (uniquement s’ils ne sont pas déjà installés). Cette fonction vient donc remplacer la fonction install.packages().\n  Par défaut, cette fonction va aussi vous demander de mettre à jour les packages (si une nouvelle version est disponible). Si vous souhaitez désactiver cette fonctionnalité, ajoutez l’argument upgrade = \"never\".\n2) Charger les packages avec la fonction devtools::load_all()\nCette fonction va aussi lire le fichier DESCRIPTION pour récupérer la liste des packages requis dans les sections Depends et Imports. Elle va charger les packages listés dans la section Imports et charger et attacher les packages listés dans la section Depends. Cette fonction vient donc remplacer la fonction library().\n\n\n\n\n\n\nImportant\n\n\n\nMettez régulièrement à jour votre fichier DESCRIPTION en :\n\najoutant les nouveaux packages que vous utilisez\nretirant les packages que vous n’utilisez plus\n\n\n\n3) Charger les fonctions    avec la fonction devtools::load_all()\nLa fonction devtools::load_all() présente un second avantage : elle va charger les fonctions  stockées dans le dossier R/ et les rendre accessibles dans la session. Elle vient donc remplacer la fonction source().\n   Après chaque modification d’une fonction , n’oubliez pas d’exécuter la fonction devtools::load_all(). Vous pouvez utiliser le raccourci clavier Ctrl + Shift + L dans RStudio.\n  Essayez ces deux fonctions.\n\n## Installation des packages manquants ----\ndevtools::install_deps(upgrade = \"never\")\n\n## Chargement des packages et des fonctions R ----\ndevtools::load_all()\n\n\n\n\n\n\n\nBonne pratique #11\n\n\n\nAvec un fichier DESCRIPTION (listant les dépendances requises) et un dossier R/, vous pouvez utiliser :\n\ndevtools::install_deps() pour installer (et mettre à jour) les packages : n’utilisez plus install.packages()\ndevtools::load_all() pour 1) charger (et attacher) les packages et 2) charger vos fonctions  : n’utilisez plus library() ni source() (pour charger vos fonctions).\n\n\n\n\n\n\nAjout d’un make.R\nAfin d’automatiser notre projet, nous allons créer un script  à la racine du projet. Nous l’appelerons, par convention, make.R. Celui-ci aura deux objectifs :\n\nmettre en place le projet en installant et chargeant les packages (et les fonctions)\nexécuter le projet en sourçant les scripts  de manière séquentielle\n\nL’idée est, qu’une fois le projet fini, l’utilisateur n’exécute que ce script : c’est le chef d’orchestre du projet.\n  Utilisez la fonction utils::file.edit() pour créer un script   à la racine du projet.\n\n## Ajout d'un makefile ----\nutils::file.edit(here::here(\"make.R\"))\n\n  Ajoutez-y les deux fonctions précédentes :\n\n# Setup project ----\n\n## Install packages ----\ndevtools::install_deps(upgrade = \"never\")\n\n## Load packages & functions ----\ndevtools::load_all()\n\n  Finalement, ajoutez une ligne dans le fichier make.R qui permettra d’exécuter le script analyses/download-data.R.\n  Utilisez les fonctions source() et here::here() pour cela.\nProposition de make.R (essayer de ne pas regarder)\n\n\nCode\n# Project title\n#\n# Project description\n# ...\n#\n# Author: Jane Doe\n# Date: 2024/12/02\n\n\n# Setup project ----\n\n## Install packages ----\ndevtools::install_deps(upgrade = \"never\")\n\n## Load packages & functions ----\ndevtools::load_all()\n\n\n# Run project ----\n\n## Download raw data ----\nsource(here::here(\"analyses\", \"download-data.R\"))\n\n\n\n\n\n\n\n%%{init:{'theme':'neutral','flowchart':{'htmlLabels':false}}}%%\nflowchart LR\n  A(\"make.R\") --&gt; B(\"analyses/download-data.R\")\n  B --&gt; C(\"dl_pantheria_data()\")\n  B --&gt; D(\"dl_wildfinder_data()\")\n\n\n\n\n\n\n\n\n\n\n\n\nBonne pratique #12\n\n\n\nUn fichier make.R placé à la racine du projet permet de facilement mettre en place le projet (installation et chargement des packages requis et des fonctions ) et d’exécuter les différentes analyses de manière séquentielle (en sourçant les scripts  qui appellent eux-même les fonctions ). C’est le chef d’orchestre du projet.\nNB. Vu la simplicité de ce projet, nous aurions très bien pu placer le contenu du script   analyses/download-data.R) dans ce make.R. La structure d’un compendium n’est pas figée, mais nous vous recommandons d’utiliser a minima des fonctions  et un make.R.\n\n\n\nStructure du compendium\npractice/                                     # Root of the compendium\n|\n├─ practice.Rproj                             # RStudio project file\n|\n├─ README.md                                  # Presentation of the project\n├─ DESCRIPTION                                # Project metadata\n├─ LICENSE.md                                 # License of the project\n|\n├─ data/                                      # Contains raw data\n|  ├─ pantheria/                              # PanTHERIA database\n|  |  └─ PanTHERIA_1-0_WR05_Aug2008.txt\n|  └─ wildfinder/                             # WWF WildFinder database\n|     ├─ wildfinder-ecoregions_list.csv\n|     ├─ wildfinder-ecoregions_species.csv\n|     └─ wildfinder-mammals_list.csv\n|\n├─ outputs/                                   # Contains results\n├─ figures/                                   # Contains figures\n├─ R/                                         # Contains R functions (only)\n|  ├─ dl_pantheria_data.R                     # Function to download PanTHERIA data\n|  └─ dl_wildfinder_data.R                    # Function to download WildFinder data\n|\n├─ analyses/                                  # Contains R scripts\n|  └─ download-data.R                         # Script to download raw data\n|\n└─ make.R                                     # Script to setup & run the project\n\n\n\n\nPour finir\nN’oubliez pas de finaliser la documentation de votre projet.\n  Editez les sections Title et Description du fichier DESCRIPTION.\nProposition de DESCRIPTION\n\n\nCode\nPackage: practice\nType: Package\nTitle: Download PanTHERIA and WWF WildFinder databases\nVersion: 0.0.0.9000\nAuthors@R: c(\n    person(given   = \"Jane\",\n           family  = \"Doe\",\n           role    = c(\"aut\", \"cre\", \"cph\"),\n           email   = \"jane.doe@mail.me\",\n           comment = c(ORCID = \"0000-0000-0000-0000\")))\nDescription: This project aims to download PanTHERIA and WWF WildFinder \n    databases. It is structured as a research compendium to be reproducible.\n    This is the result of the Practice 1 of the training course Reproducible \n    Research in Computational Ecology available at:\n    &lt;https://rdatatoolbox.github.io/chapters/ex-compendium.html&gt;.\nLicense: GPL-2\nEncoding: UTF-8\nImports:\n    here,\n    utils\n\n\n  Editez le README.\nProposition de README\n\n\nCode\n# Practice\n\nThis project aims to download the [PanTHERIA](https://doi.org/10.1890/08-1494.1) \ndatabase (Kate _et al._, 2009) and the \n[WWF WildFinder](https://www.worldwildlife.org/pages/wildfinder-database) \ndatabase (World Wildlife Fund 2006). It is structured as a research compendium \nto be reproducible.\n\n**NB.** This is the result of the Practice 1 of the training course\n[Reproducible Research in Computational Ecology](https://rdatatoolbox.github.io).\n\n\n## Content\n\nThis project is structured as follow:\n\n.\n├─ practice.Rproj                             # RStudio project file\n|\n├─ README.md                                  # Presentation of the project\n├─ DESCRIPTION                                # Project metadata\n├─ LICENSE.md                                 # License of the project\n|\n├─ data/                                      # Contains raw data\n|  ├─ pantheria/                              # PanTHERIA database\n|  |  └─ PanTHERIA_1-0_WR05_Aug2008.txt\n|  └─ wildfinder/                             # WWF WildFinder database\n|     ├─ wildfinder-ecoregions_list.csv\n|     ├─ wildfinder-ecoregions_species.csv\n|     └─ wildfinder-mammals_list.csv\n|\n├─ outputs/                                   # Contains results\n├─ figures/                                   # Contains figures\n├─ R/                                         # Contains R functions (only)\n|  ├─ dl_pantheria_data.R                     # Function to download PanTHERIA data\n|  └─ dl_wildfinder_data.R                    # Function to download WildFinder data\n|\n├─ analyses/                                  # Contains R scripts\n|  └─ download-data.R                         # Script to download raw data\n|\n└─ make.R                                     # Script to setup & run the project\n\n\n## Installation\n\nComing soon...\n\n\n## Usage\n\nOpen the `practice.Rproj` file in RStudio and run `source(\"make.R\")` to launch \nanalyses. \n\n- All packages will be automatically installed and loaded\n- Datasets will be saved in the `data/` directory\n\n\n## License\n\nThis project is released under the \n[GPL-2](https://choosealicense.com/licenses/gpl-2.0/) license.\n\n\n## Citation\n\n&gt; Doe J (2024) Download PanTHERIA and WWF WildFinder databases.\n\n\n## References\n\nKate EJ, Bielby J, Cardillo M _et al._ (2009) PanTHERIA: A \nspecies-level database of life history, ecology, and geography of extant and \nrecently extinct mammals. _Ecology_, 90, 2648. \nDOI: [10.1890/08-1494.1](https://doi.org/10.1890/08-1494.1)\n\nWorld Wildlife Fund (2006) WildFinder: Online database of species distributions. \nVersion Jan-06. URL: https://www.worldwildlife.org/pages/wildfinder-database\n\n\n\n\nFélicitation \nVotre projet est devenu un véritable research compendium fonctionnel et reproductible.\n\n\n  The final compendium can be found here.\n\n\n\n\n\n\n\nLa fonction new_compendium()\n\n\n\nL’ensemble de ces étapes peut être réalisé avec une seule fonction : new_compendium() de rcompendium. Lisez attentivement la documentation avant d’utiliser cette fonction.",
    "crumbs": [
      "Exercises",
      "Research compendium"
    ]
  },
  {
    "objectID": "chapters/ex-github.html",
    "href": "chapters/ex-github.html",
    "title": "Git & GitHub",
    "section": "",
    "text": "Objectif\n\n\n\nL’objectif de cet exercice est de vous familiariser avec l’utilisation de  et .\n\n\n\nTravailler seul\n  Vous allez envoyer le research compendium créé à l’Exercice 1 sur votre compte GitHub.\n\n\n\n\n\n\nGitHub First vs. GitHub Last\n\n\n\nCette approche est appelée GitHub Last : on crée d’abord le projet en local, puis on crée le dépôt distant. Pour plus d’information : GitHub First et GitHub Last.\n\n\n\nInitialiser git\nDans un premier temps, vous devez initialiser git dans votre projet. Entrez la ligne de commande suivante dans le terminal de RStudio :\n## Initialisation de git -----\ngit init\nVérifiez l’état de votre projet :\n## Statut des fichiers vu par git -----\ngit status\n\n\nAjout d’un .gitignore\nCertains fichiers sont inutiles à versionner et peuvent même parfois créer des conflits. C’est le cas notamment du fichier .Rproj. Nous allons les ajouter au .gitignore en utilisant la fonction  add_to_gitignore() de rcompendium\n\n## Ajout d'un .gitignore pour les projets R -----\nrcompendium::add_to_gitignore()\n\n\n\nPremière version\nIl est temps de créer une première version. Cela se fera en deux temps : 1) sélection des fichiers (git add) et 2) enregistrement de la version (git commit).\n## Sélection de tous les fichiers ----\ngit add .\n\n## Création d'une nouvelle version ----\ngit commit -m \"init repo\"\nVérifiez le status des fichiers :\n## Statut des fichiers vu par git -----\ngit status\nAffichez l’historique :\n## Historique des versions -----\ngit log\n\n\nCréation du dépôt GitHub\nMaintenant, nous souhaitons envoyer notre projet sur GitHub. Rendez-vous sur GitHub et créez un nouveau dépôt VIDE : donnez juste un nom de dépôt et n’ajoutez aucun fichier supplémentaire (pas de licence, .gitignore, README). La page du dépôt créé contient une série d’instructions correspondant à trois cas de figure. Nous allons suivre la section Push an existing repository from the command line.\nDans le terminal de RStudio :\n## Ajout du chemin vers le dépôt distant ----\ngit remote add origin git@github.com:your_account/your_repo.git\n\n## Envoi du dépôt local vers le dépôt distant ----\ngit push -u origin main\n\nFélicitation ! Votre research compendium est maintenant sur GitHub.\n\n\n\n\n\n\n\nGitHub API\n\n\n\nUne alternative est d’utiliser l’API GitHub via la fonction  use_github() du package usethis. Cette fonction va créer le dépôt distant sur GitHub et envoyer votre dépôt local sur GitHub (git push).\n\n## Création du dépôt public GitHub ----\nusethis::use_github()\n\n  Pour utiliser l’API GitHub, vous devez avoir sauvegardé localement votre GitHub Personal Access Token (PAT) tel quel indiqué ici.\n\n\nContinuez à modifier vos fichiers, créez de nouvelles versions (git add et git commit) et envoyez-les sur GitHub (git push).\n\n\n\nCollaborer\n  Mettez-vous par groupe de 2-3 personnes et déterminez un leader parmis vous : vous allez collaborer sur son projet.\nSur GitHub, le leader va allez dans les Settings et ajoutez une personne de votre groupe comme collaborateur de votre projet.\n  Mettez en oeuvre 3 solutions pour collaborer sur le même projet. En fonction de votre statut dans le projet et de votre objectif :\n\nUtilisez les Issues pour suggérer au leader des améliorations\nSi vous êtes collaborateur, Clonez le dépôt, faites les modifications et envoyez-les\nSi vous ne l’êtes pas, Forkez, Clonez, et essayez la Pull Request",
    "crumbs": [
      "Exercises",
      "Git & GitHub"
    ]
  },
  {
    "objectID": "chapters/ex-quarto.html",
    "href": "chapters/ex-quarto.html",
    "title": "Quarto",
    "section": "",
    "text": "Consignes\nNous allons utiliser les données WildFinder du WWF pour répondre à la question suivante : Dans combien d’écorégions différentes retrouve-t-on chaque espèce d’Ursidés ?\nPour ce faire, continuez à travailler dans votre research compendium de l’exercice 2 et écrivez des fonctions  pour :\nPuis, créez un fichier index.qmd à la racine du projet qui appellera chaque fonction créée précédemment. Devront figurer dans le document final, a minima, le résultat demandé sous forme de tableau (fonction knitr::kable()) et de figure, ainsi que la source des données. Structurez votre document avec des titres et des paragraphes.\nFinalement, ajoutez une ligne de code dans votre make.R qui permettra de transpiler votre index.qmd en version index.html (fonction quarto::quarto_render()).\nPensez aux commits ! Pensez aussi à mettre à jour la liste des dépendances dans le fichiers DESCRIPTION avec la fonction add_dependencies() de rcompendium.",
    "crumbs": [
      "Exercises",
      "Quarto"
    ]
  },
  {
    "objectID": "chapters/ex-quarto.html#bonus",
    "href": "chapters/ex-quarto.html#bonus",
    "title": "Quarto",
    "section": "Bonus",
    "text": "Bonus\nSi votre code est bien écrit, vous pouvez rapidement l’exécuter avec une autre famille de Mammifères !",
    "crumbs": [
      "Exercises",
      "Quarto"
    ]
  },
  {
    "objectID": "chapters/ex-targets.html",
    "href": "chapters/ex-targets.html",
    "title": "Targets",
    "section": "",
    "text": "Objectif\n\n\n\nL’objectif de cet exercice est de vous familiariser avec l’utilisation de targets, package  permettant d’optimiser le flux de travail.\n\n\n\nConsignes\nNous allons intégrer targets au research compendium créé lors de l’exercice 3.\nAvant toute chose, supprimez la ligne devtools::load_all() du fichier make.R : cette fonction n’est pas prise en compte par targets pour charger les fonctions.\nPuis, procédez comme suit :\n\nEcrivez votre plan d’analyses dans un fichier _targets.R placé à la racine du projet. N’oubliez pas d’attacher les packages targets et tarchetypes avec la fonction library() et de sourcer les différentes fonctions avec source().\nLe dernier élément du pipeline sera le rapport index.qmd vu à l’exercice précédent. Cependant, celui-ci n’exécutera aucune fonction créée (celles-ci seront gérées par targets). Le fichier .qmd se contentera d’importer les outputs : vous devrez exporter la figure (avec une nouvelle fonction) dans le dossier figures/. L’affichage du tableau résultat pourra se faire avec les fonctions targets::tar_read() et/ou targets::tar_load().\nFinalement, dans le fichier make.R remplacez la ligne quarto::quarto_render() par tar::tar_make()\n\n  Pensez aux commits ! Pensez aussi à mettre à jour la liste des dépendances dans le fichiers DESCRIPTION avec la fonction add_dependencies() de rcompendium.",
    "crumbs": [
      "Exercises",
      "Targets"
    ]
  },
  {
    "objectID": "chapters/ex-renv.html",
    "href": "chapters/ex-renv.html",
    "title": "Renv",
    "section": "",
    "text": "Objectif\n\n\n\nL’objectif de cet exercice est de vous familiariser avec l’utilisation de renv, package  permettant de gérer les versions de packages requis par le projet.\n\n\n\nConsignes\nNous allons intégrer renv au research compendium créé lors de l’exercice 4.\n\nUtilisez la fonction renv::init()\nAjoutez le dossier renv/ et le ficher .Rprofile au .gitignore (afin de ne pas envoyer sur GitHub les packages - seul le renv.lock suffit)\nJouez avec les fonctions renv::status(), renv::install() et renv::snapshot() (n’oubliez pas de mettre à jour la liste des dépendances dans le fichier DESCRIPTION avec la fonction add_dependencies() de rcompendium)\nModifiez le make.R de manière à installer les packages via renv plutôt qu’avec la fonction remotes::install_deps()\nVérifiez si votre projet est encore fonctionnel en exécutant le make.R\n\n  Pensez aux commits !",
    "crumbs": [
      "Exercises",
      "Renv"
    ]
  },
  {
    "objectID": "chapters/ex-docker.html",
    "href": "chapters/ex-docker.html",
    "title": "Docker",
    "section": "",
    "text": "Objectif\n\n\n\nL’objectif de cet exercice est de vous familiariser avec l’utilisation de Docker, et plus particulièrement avec la création d’un Dockerfile.\n\n\n\nConsignes\nNous allons ajouter un Dockerfile au research compendium créé lors de l’exercice 5.\n\nUtilisez la fonction rcompendium::add_dockerfile() (désactivez temporairement renv avec renv::deactivate() le temps d’utiliser cette fonction, puis réactivez-le avec renv::activate())\nRéfléchissez si la version de l’image de base rocker/rstudio:4.3.2 est la plus appropriée à votre projet\nRegardez le contenu du README.Rmd : doit-il être transpilé ?\nUtilisez Docker : suivez les instructions du README.md pour construire votre image, démarrer un conteneur et exécuter les analyses dans votre environnement Docker.\n\n  Pensez aux commits !\n\nFélicitation ! Votre project est 99,99% reproductible.",
    "crumbs": [
      "Exercises",
      "Docker"
    ]
  },
  {
    "objectID": "chapters/ex-package.html",
    "href": "chapters/ex-package.html",
    "title": "Package",
    "section": "",
    "text": "Objectif\n\n\n\nDans cet exercice, vous allez créer un package .\n\n\n\nConsignes\nCréez un nouveau projet RStudio.\n\nUtilisez la fonction rcompendium::add_description() pour ajouter un fichier DESCRIPTION\nUtilisez la fonction rcompendium::add_to_gitignore() pour ajouter un .gitignore spécifique à \nImplémentez des fonctions  dans le dossier R/ et documentez-les avec la syntaxe roxygen2. Vous pouvez réutiliser certaines fonctions développées lors des exercices précédents.\nMettez à jour la documentation des fonctions avec devtools::document()\nMettez à jour les dépendances dans le fichier DESCRIPTION avec rcompendium::add_dependencies()\nVérifiez que votre package ne comporte pas d’erreur avec devtools::check()\nAjoutez un README.Rmd avec rcompendium::add_readme_rmd() et éditez-le. N’oubliez pas de le transpiler en README.md avec rmarkdown::render()\nUtilisez la fonction usethis::use_github() pour envoyer votre projet sur GitHub.\n\n  Pensez aux commits !\n\n\nBonus\n  Mettez en place des GitHub Actions pour :\n\nVérifiez votre package sur les serveurs GitHub après chaque push avec rcompendium::add_github_actions_check()\nDéployez le site Web du package avec rcompendium::add_github_actions_pkgdown()\n\nAjoutez au README.Rmd les badges correspondants avec rcompendium::add_github_actions_check_badge() et rcompendium::add_github_actions_pkgdown_badge().\n\n\n\n\n\n\nLa fonction new_package()\n\n\n\nL’ensemble de ces étapes peut être réalisé avec une seule fonction : new_package() de rcompendium. N’oubliez pas de créer un nouveau projet RStudio avant si vous voulez l’utiliser.",
    "crumbs": [
      "Exercises",
      "Package"
    ]
  },
  {
    "objectID": "chapters/biblio.html",
    "href": "chapters/biblio.html",
    "title": "Bibliography",
    "section": "",
    "text": "Articles\nAlston JA & Rick JM (2021) A Beginner’s Guide to Conducting Reproducible Research. The Bulletin of the Ecological Society of America, 102, e01801. DOI: 10.1002/bes2.1801.\nBarba LA (2018) Terminologies for Reproducible Research. arXiv. arXix: arXiv:1802.03311.\nBlischak JD, Davenport ER & Wilson G (2016) A Quick Introduction to Version Control with Git and GitHub. PLoS Computational Biology, 12, e1004668. DOI: 10.1371/journal.pcbi.1004668.\nBraga PHP, Hébert K, Hudgins EJ, et al. (2023) Not Just for Programmers: How GitHub Can Accelerate Collaborative and Reproducible Research in Ecology and Evolution. Methods in Ecology and Evolution, 14, 1364-1380. DOI: 10.1111/2041-210x.14108.\nBrousil MR, Filazzola A, Meyer MF, et al. (2023) Improving Ecological Data Science with Workflow Management Software, 14, 1381-1388. DOI: 10.1111/2041-210X.14113.\nBryan J (2017) Excuse Me, Do You Have a Moment to Talk About Version Control? PeerJ Preprints, 5, e3159v2. DOI: 10.7287/peerj.preprints.3159v2.\nLee BD (2018) Ten Simple Rules for Documenting Scientific Software. PLoS Computational Biology, 12, e1006561. DOI: 10.1371/journal.pcbi.1006561.\nMarwick B, Boettiger C & Mullen L (2018) Packaging Data Analytical Work Reproducibly Using R (and Friends). The American Statistician, 72, 80-88. DOI: 10.1080/00031305.2017.1375986.\nNüst D, Sochat V, Marwick Ben et al. (2020) Ten Simple Rules for Writing Dockerfiles for Reproducible Data Science. PLoS Computational Biology, 16, e1008316 DOI: 10.1371/journal.pcbi.1008316.\nPeng RD & Hicks SC (2021) Reproducible Research: A Retrospective. Annual Review of Public Health, 42, 79-93. DOI: 10.1146/annurev-publhealth-012420-105110\nPerez-Riverol Y, Gatto L, Wang R et al. (2016) Ten Simple Rules for Taking Advantage of Git and GitHub. PLoS Computational Biology, 12, e1004947. DOI: 10.1371/journal.pcbi.1004947.\nRomano JD & Moore JH (2020) Ten Simple Rules for Writing a Paper about Scientific Software. PLoS Computational Biology, 16, e1008390 DOI: 10.1371/journal.pcbi.1008390.\nSandve GK, Nekrutenko A, Taylor J et al. (2013) Ten Simple Rules for Reproducible Computational Research. PLoS Computational Biology, 9, e1003285. DOI: 10.1371/journal.pcbi.1003285.\nWilson G & Bryan J & Cranston K et al. (2017) Good Enough Practices in Scientific Computing. PLoS Computational Biology, 13, e1005510. DOI: 10.1371/journal.pcbi.1005510.\n\n\nOnline books\nBryan J (2023) Happy Git and GitHub for the useR. URL: https://happygitwithr.com/.\nLandau W (2023) The targets R package user manual. URL: https://books.ropensci.org/targets/.\nWickham H (2019) Advanced R. URL: https://adv-r.hadley.nz/.\nWickham H (2023) R for Data Science. URL: https://r4ds.had.co.nz/.\nWickham H & Bryan J (2023) R Packages: Organize, Test, Document, and Share Your Code. URL: https://r-pkgs.org/.\nYihui X, Allaire JJ & Grolemund G (2023) R Markdown: The Definitive Guide. URL: https://bookdown.org/yihui/rmarkdown/.",
    "crumbs": [
      "Resources",
      "Bibliography"
    ]
  },
  {
    "objectID": "chapters/wrap-up.html",
    "href": "chapters/wrap-up.html",
    "title": "Wrap up",
    "section": "",
    "text": "Download the full size image",
    "crumbs": [
      "Resources",
      "Wrap up"
    ]
  }
]